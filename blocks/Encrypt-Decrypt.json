[{"name":"ArabWare","palette":"25","spec":"created by arab ware channel","type":"h","typeName":"","color":"#FF2196F3","code":""},{"spec2":"if there is bug then","typeName":"","color":"#FF2196F3","name":"TRY TO ENCRYPT","palette":"25","spec":"Try to encrypt text with key %s the text is %s","type":"e","code":"try {\njavax.crypto.SecretKey key \u003d generateKey(%1$s); \njavax.crypto.Cipher c \u003d javax.crypto.Cipher.getInstance(\"AES\"); \nc.init(javax.crypto.Cipher.ENCRYPT_MODE, key); \nbyte[] encVal \u003d c.doFinal(%2$s.getBytes());\n%3$s\n} catch (Exception ex) {\n%4$s\n}"},{"name":"get encrypt","palette":"25","spec":"get encrypted text","type":"s","typeName":"","color":"#FF2196F3","code":"android.util.Base64.encodeToString(encVal,android.util.Base64.DEFAULT)"},{"spec2":"if there is bug then","typeName":"","color":"#FF2196F3","name":"TRY TO DECRYPT","palette":"25","spec":"Try to decrypt text with key %s with text %s","type":"e","code":"try {\njavax.crypto.spec.SecretKeySpec key \u003d (javax.crypto.spec.SecretKeySpec) generateKey(%1$s);\n\njavax.crypto.Cipher c \u003d javax.crypto.Cipher.getInstance(\"AES\");\nc.init(javax.crypto.Cipher.DECRYPT_MODE,key); \nbyte[] decode \u003d android.util.Base64.decode(%2$s,android.util.Base64.DEFAULT); \nbyte[] decval \u003d c.doFinal(decode);\n%3$s\n} catch (Exception ex) {\n%4$s\n}"},{"name":"get decrypted text","palette":"25","spec":"get decrypted text","type":"s","typeName":"","color":"#FF2196F3","code":"new String(decval)"},{"name":"map variable encryption-decryption","palette":"25","spec":"map variable encryption-decryption","type":"h","typeName":"","color":"#FF2196F3","code":""},{"name":"set map variable","palette":"25","spec":"set %m.varMap as with key %s with value %d with encryption key %s ","typeName":"","type":" ","code":"%1$s.put(%2$s, String.valueOf((long)(3)).concat(%4$s));\r","color":"#FF2196F3"},{"name":"increase map variable","palette":"25","spec":"increase encrypted %m.varMap with key %s with encryption key %s increase + %d","typeName":"","type":" ","code":"%1$s.put(%2$s, String.valueOf((long)(Double.parseDouble(map.get(%2$s).toString().replace(%3$s, \"\")) + %4$s)).concat(%3$s));","color":"#FF2196F3"},{"name":"decrease map variable","palette":"25","spec":"decrease encrypted %m.varMap with key %s with encryption key %s decrease - %d","typeName":"","type":" ","code":"%1$s.put(%2$s, String.valueOf((long)(Double.parseDouble(y.get(%2$s).toString().replace(%3$s, \"\")) - %4$s)).concat(%3$s));","color":"#FF2196F3"},{"name":"map variable get","palette":"25","spec":"get decrypted %m.varMap with key %s with decryption key %s","typeName":"","type":"d","code":"String.valueOf((long)(Double.parseDouble(%1$s.get(%2$s).toString().replace(%3$s, \"\")) + 0))","color":"#FF2196F3"},{"name":"genius encrypt","palette":"25","spec":"genius encryption","typeName":"","type":"h","code":"","color":"#FF2196F3"},{"name":"reverse text","palette":"25","spec":"get %s as reverse text","type":"s","typeName":"","color":"#FF2196F3","code":"new StringBuilder(%s).reverse().toString()"},{"name":"text to binary","palette":"25","spec":"from text %s to binary","typeName":"","type":" ","code":"String text \u003d %1$s;\nbyte[] bytes \u003d text.getBytes(); StringBuilder binary \u003d new StringBuilder();\n\nfor (byte b : bytes) {\n   int val \u003d b;\n  for (int i \u003d 0; i \u003c 8; i++) { \n      binary.append((val \u0026 128) \u003d\u003d 0\n? 0 : 1);\n  val \u003c\u003c\u003d 1;  }\n    binary.append(\u0027 \u0027);\n}","color":"#FF2196F3"},{"name":"get binary result","palette":"25","spec":"get binary result","type":"s","typeName":"","color":"#FF2196F3","code":"binary"},{"name":"binary to text","palette":"25","spec":"from binary %s to text","typeName":"","type":" ","code":"String biner \u003d %1$s;\nString hasil \u003d \"\"; char nextChar;\n\nfor(int i \u003d 0; i \u003c\u003d biner.length()-8; i +\u003d 9) {  nextChar \u003d (char)Integer.parseInt(biner.substring(i, i+8), 2);  hasil +\u003d nextChar; }","color":"#FF2196F3"},{"name":"get text result","palette":"25","spec":"get text result","type":"s","typeName":"","color":"#FF2196F3","code":"String.valueOf(hasil)"}]