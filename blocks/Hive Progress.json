[{"name":"Hive Library","palette":"66","spec":"||Hive Library ||","typeName":"","type":" ","code":"}\npublic static class HiveProgressView extends View {\r\n    private static final int[] rainbowColor \u003d {\r\n        0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, 0x0000FF, 0x4B0082, 0x9400D3\r\n    };\r\n    private static final int MAX_PROGRESS_VALUE \u003d 1450;\r\n    private static final int PROGRESS_TIME \u003d 2000;\r\n    private static final int MAX_ALPHA \u003d 70;\r\n    private Paint paint \u003d new Paint();\r\n    private int hexHeight;\r\n    private int hexWidth;\r\n    private int hexPadding \u003d 0;\r\n    private float actualProgress \u003d 0;\r\n    private int maxAlpha \u003d MAX_ALPHA;\r\n    private int animationTime \u003d PROGRESS_TIME;\r\n    private int color;\r\n    private boolean rainbow;\r\n    private int cornerRadius;\r\n    private boolean shrink;\r\n    private AnimatorSet indeterminateAnimator;\r\n    public HiveProgressView(Context context) {\r\n        super(context);\r\n    }\r\n    public HiveProgressView(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n    public HiveProgressView(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        initAttributes(attrs, defStyle);\r\n        initPaint();\r\n    }\r\n    private void initAttributes(AttributeSet attrs, int defStyle) {\r\n        animationTime \u003d PROGRESS_TIME;\r\n        maxAlpha \u003d MAX_ALPHA;\r\n        color \u003d Color.BLACK;\r\n        rainbow \u003d false;\r\n        shrink \u003d false;\r\n        cornerRadius \u003d 0;\r\n    }\r\n    public int getMaxAlpha() {\r\n        return maxAlpha;\r\n    }\r\n    public void setMaxAlpha(int maxAlpha) {\r\n        this.maxAlpha \u003d maxAlpha;\r\n    }\r\n    public int getAnimationTime() {\r\n        return animationTime;\r\n    }\r\n    public void setAnimationTime(int animationTime) {\r\n        this.animationTime \u003d animationTime;\r\n    }\r\n    public int getColor() {\r\n        return color;\r\n    }\r\n    public void setColor(int color) {\r\n        this.color \u003d color;\r\n    }\r\n    public boolean isRainbow() {\r\n        return rainbow;\r\n    }\r\n    public void setRainbow(boolean rainbow) {\r\n        this.rainbow \u003d rainbow;\r\n    }\r\n    public int getCornerRadius() {\r\n        return cornerRadius;\r\n    }\r\n    public void setCornerRadius(int cornerRadius) {\r\n        this.cornerRadius \u003d cornerRadius;\r\n    }\r\n    public boolean isShrink() {\r\n        return shrink;\r\n    }\r\n    public void setShrink(boolean shrink) {\r\n        this.shrink \u003d shrink;\r\n    }\r\n    private void initPaint() {\r\n        paint.setAlpha(0);\r\n        paint.setPathEffect(new CornerPathEffect(cornerRadius));\r\n        paint.setColor(color);\r\n        paint.setStyle(Paint.Style.FILL);\r\n        paint.setAntiAlias(true);\r\n    }\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        startAnimation();\r\n    }\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        stopAnimation();\r\n    }\r\n    @Override\r\n    public void setVisibility(int visibility) {\r\n        int currentVisibility \u003d getVisibility();\r\n        super.setVisibility(visibility);\r\n        if (visibility !\u003d currentVisibility) {\r\n            if (visibility \u003d\u003d View.VISIBLE) {\r\n                resetAnimator();\r\n            } else if (visibility \u003d\u003d View.GONE || visibility \u003d\u003d View.INVISIBLE) {\r\n                stopAnimation();\r\n            }\r\n        }\r\n    }\r\n    private void startAnimation() {\r\n        resetAnimator();\r\n    }\r\n    private void stopAnimation() {\r\n        actualProgress \u003d 0;\r\n        if (indeterminateAnimator !\u003d null) {\r\n            indeterminateAnimator.cancel();\r\n            indeterminateAnimator \u003d null;\r\n        }\r\n    }\r\n    private void resetAnimator() {\r\n        if (indeterminateAnimator !\u003d null \u0026\u0026 indeterminateAnimator.isRunning()) {\r\n            indeterminateAnimator.cancel();\r\n        }\r\n        ValueAnimator progressAnimator \u003d ValueAnimator.ofFloat(0, MAX_PROGRESS_VALUE);\r\n        progressAnimator.setDuration(animationTime);\r\n        progressAnimator.setInterpolator(new LinearInterpolator());\r\n        progressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                actualProgress \u003d (Float) animation.getAnimatedValue();\r\n                invalidate();\r\n            }\r\n        });\r\n        indeterminateAnimator \u003d new AnimatorSet();\r\n        indeterminateAnimator.play(progressAnimator);\r\n        indeterminateAnimator.addListener(new AnimatorListenerAdapter() {\r\n            boolean wasCancelled \u003d false;\r\n            @Override\r\n            public void onAnimationCancel(Animator animation) {\r\n                wasCancelled \u003d true;\r\n            }\r\n            @Override\r\n            public void onAnimationEnd(Animator animation) {\r\n                if (!wasCancelled) {\r\n                    resetAnimator();\r\n                }\r\n            }\r\n        });\r\n        indeterminateAnimator.start();\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int viewWidth \u003d MeasureSpec.getSize(widthMeasureSpec);\r\n        int viewHeight \u003d viewWidth;\r\n        hexWidth \u003d viewWidth / 3;\r\n        hexHeight \u003d viewHeight * 2 / 5;\r\n        hexPadding \u003d viewHeight / 23;\r\n        setMeasuredDimension(viewWidth, viewHeight);\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        int alpha \u003d getAlpha(1, actualProgress);\r\n        paint.setColor(getHexagonColor(1));\r\n        paint.setAlpha(alpha);\r\n        Path hexPath \u003d hiveRect(hexWidth / 2, hexPadding, hexWidth * 3 / 2, hexHeight + hexPadding,\r\n                                (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(2, actualProgress);\r\n        paint.setColor(getHexagonColor(2));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 3 / 2, hexPadding, hexWidth * 5 / 2, hexHeight + hexPadding,\r\n                           (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(6, actualProgress);\r\n        paint.setColor(getHexagonColor(6));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(0, hexHeight * 3 / 4 + hexPadding, hexWidth,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(7, actualProgress);\r\n        paint.setColor(getHexagonColor(7));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth, hexHeight * 3 / 4 + hexPadding, hexWidth * 2,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(3, actualProgress);\r\n        paint.setColor(getHexagonColor(3));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 2, hexHeight * 3 / 4 + hexPadding, hexWidth * 3,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(5, actualProgress);\r\n        paint.setColor(getHexagonColor(5));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth / 2, hexHeight * 6 / 4 + hexPadding, hexWidth * 3 / 2,\r\n                           hexHeight * 10 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(4, actualProgress);\r\n        paint.setColor(getHexagonColor(4));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 3 / 2, hexHeight * 6 / 4 + hexPadding, hexWidth * 5 / 2,\r\n                           hexHeight * 10 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n    }\r\n    private int getHexagonColor(int position) {\r\n        if (rainbow \u0026\u0026 position \u003c\u003d rainbowColor.length) {\r\n            return rainbowColor[position - 1];\r\n        } else {\r\n            return color;\r\n        }\r\n    }\r\n    private int getAlpha(int num, float progress) {\r\n        float alpha;\r\n        if (progress \u003e num * 100) {\r\n            alpha \u003d maxAlpha;\r\n        } else {\r\n            int min \u003d (num - 1) * 100;\r\n            alpha \u003d (progress - min) \u003e 0 ? progress - min : 0;\r\n            alpha \u003d alpha * maxAlpha / 100;\r\n        }\r\n        if (progress \u003e 700) {\r\n            float fadeProgress \u003d progress - 700;\r\n            if (fadeProgress \u003e num * 100) {\r\n                alpha \u003d 0;\r\n            } else {\r\n                int min \u003d (num - 1) * 100;\r\n                alpha \u003d (fadeProgress - min) \u003e 0 ? fadeProgress - min : 0;\r\n                alpha \u003d maxAlpha - alpha * maxAlpha / 100;\r\n            }\r\n        }\r\n        if (progress \u003e 1400) {\r\n            alpha \u003d 0;\r\n        }\r\n        return (int) alpha;\r\n    }\r\n    private Path hiveRect(int left, int top, int right, int bottom, float percentage) {\r\n        Path path \u003d new Path();\r\n        int height \u003d Math.abs(bottom - top);\r\n        int width \u003d Math.abs(right - left);\r\n        int r \u003d width \u003e height ? height : width;\r\n        r \u003d r / 2;\r\n        int y \u003d top;\r\n        if (shrink) {\r\n            y \u003d top + (int) (r - percentage * r);\r\n            r \u003d (int) (percentage * r);\r\n        }\r\n        int x \u003d (right - left) / 2 + left;\r\n        int edge \u003d (int) (r * Math.sqrt(3) / 2);\r\n        path.moveTo(x, y);\r\n        x \u003d x + edge;\r\n        y \u003d y + r / 2;\r\n        path.lineTo(x, y);\r\n        y \u003d y + r;\r\n        path.lineTo(x, y);\r\n        x \u003d x - edge;\r\n        y \u003d y + r / 2;\r\n        path.lineTo(x, y);\r\n        x \u003d x - edge;\r\n        y \u003d y - r / 2;\r\n        path.lineTo(x, y);\r\n        y \u003d y - r;\r\n        path.lineTo(x, y);\r\n        path.close();\r\n        return path;\r\n    }\r\n}\n{","color":"#FFFFA000"},{"name":"Install Hive Library","palette":"66","spec":"Install Hive Library with ID %s.inputOnly in %m.view with color %m.color","type":" ","typeName":"","color":"#FFFFA000","code":"HiveProgressView %1$s \u003d new HiveProgressView(this);\r\n%2$s.addView(%1$s);\r\n%1$s.setRainbow(false);\r\n%1$s.setColor(%3$s);"}]