[{"name":"ImageToASCIILibrary","palette":"140","spec":"\u003e\u003e\u003e\u003e\u003e\u003e ImageToASCII Library created by Shyam Kumar Kshetri\u003c\u003c\u003c\u003c\u003c\u003c","typeName":"","type":" ","code":"}\n//create by Shyam Kumar Kshetri\npublic static class Img2Ascii {\n    private String[] chars \u003d {\"@\", \"#\", \"+\", \"\\\\\", \";\", \":\", \",\", \".\", \"`\", \" \"};\n    private Bitmap rgbImage;\n    private Boolean color \u003d false;\n    private int quality \u003d 3;\n    private int qualityColor \u003d 6;\n    private Spannable response;\n    private Listener listener;\n    public Img2Ascii(){\n    }\n    public Img2Ascii bitmap(Bitmap rgbImage){\n        this.rgbImage \u003d rgbImage;\n        return this;\n    }\n    public Img2Ascii quality(int quality){\n        this.quality \u003d quality;\n        return this;\n    }\n    public Img2Ascii color(Boolean color){\n        this.color \u003d color;\n        return this;\n    }\n    public void convert(Listener listener) {\n        this.listener \u003d listener;\n        new InstaApi().execute();\n    }\n    private class InstaApi extends AsyncTask\u003cString, Integer, Void\u003e {\n        private InstaApi(){\n        }\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n        @Override\n        protected Void doInBackground(String... arg0) {\n            if(color) {\n                quality \u003d quality + qualityColor;\n                if (quality \u003e 5 + qualityColor || quality \u003c 1 + qualityColor)\n                    quality \u003d 3 + qualityColor;\n            }else{\n                if (quality \u003e 5 || quality \u003c 1)\n                    quality \u003d 3;\n            }\n            String tx;\n            SpannableStringBuilder span \u003d new SpannableStringBuilder();\n            int width \u003d rgbImage.getWidth();\n            int height \u003d rgbImage.getHeight();\n            int i \u003d 0;\n            for (int y \u003d 0; y \u003c height; y \u003d y + quality) {\n                for (int x \u003d 0; x \u003c width; x \u003d x + quality) {\n                    int pixel \u003d rgbImage.getPixel(x, y);\n                    int red \u003d Color.red(pixel);\n                    int green \u003d Color.green(pixel);\n                    int blue \u003d Color.blue(pixel);\n                    if(color) {\n                        tx \u003d \"#\";\n                        span.append(tx);\n                        span.setSpan(new android.text.style.ForegroundColorSpan(Color.rgb(red, green, blue)), i, i + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n                    }else {\n                        int brightness \u003d red + green + blue;\n                        brightness \u003d java.lang.Math.round(brightness / (765 / (chars.length - 1)));\n                        tx \u003d chars[brightness];\n                        span.append(tx);\n                    }\n                    i++;\n                }\n                tx \u003d \"\\n\";\n                span.append(tx);\n                publishProgress(y, height);\n                i++;\n                if(isCancelled()) break;\n            }\n            response \u003d span;\n\n            return null;\n        }\n        protected void onProgressUpdate(Integer... progress) {\n            int current \u003d progress[0];\n            int total \u003d progress[1];\n            int percentage \u003d 100 * current / total;\n            listener.onProgress(percentage);\n        }\n        @Override\n        protected void onPostExecute(Void result) {\n            super.onPostExecute(result);\n            listener.onResponse(response);\n        }\n\n    }\n    public interface Listener {\n        void onProgress(int percentage);\n        void onResponse(Spannable response);\n    }","color":"#FF3F51B5"},{"name":"ImageToASCIISetText","palette":"140","spec":"%m.textview setTextFrom %m.ImageFrom  quality(1-5) %d  enableColor %b","typeName":"","type":" ","code":"new Img2Ascii()\n   .bitmap(%2$s)\n   .quality(%3$s) // 1 - 5\n   .color(%4$s)\n   .convert(new Img2Ascii.Listener() {\n      @Override\n      public void onProgress(int percentage) {\n         %1$s.setText(String.valueOf(percentage) + \" %%\");\n      }\n      @Override\n      public void onResponse(Spannable text) {\n         %1$s.setText(text);\n      }\n   });","color":"#FF3F51B5"},{"name":"ImageToASCIIImageFromResource","palette":"140","spec":"imageFromResource %m.resource","typeName":"ImageFrom","type":"p","code":"BitmapFactory.decodeResource(getResources(), R.drawable.%s)","color":"#FF3F51B5"},{"name":"ImageToASCIIImageFromFile","palette":"140","spec":"imageFromFile %s","typeName":"ImageFrom","type":"p","code":"BitmapFactory.decodeFile(%s)","color":"#FF3F51B5"}]