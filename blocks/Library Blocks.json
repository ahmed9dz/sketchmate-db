[{"name":"Shimmer","palette":"75","spec":"Shimmer Library","typeName":"","type":" ","code":"public interface ShimmerViewBase {\n\n    public float getGradientX();\n    public void setGradientX(float gradientX);\n    public boolean isShimmering();\n    public void setShimmering(boolean isShimmering);\n    public boolean isSetUp();\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback);\n    public int getPrimaryColor();\n    public void setPrimaryColor(int primaryColor);\n    public int getReflectionColor();\n    public void setReflectionColor(int reflectionColor);\n}\n\n\n\npublic static class ShimmerViewHelper {\n\n    public interface AnimationSetupCallback {\n        void onSetupAnimation(View target);\n    }\n\n    private static final int DEFAULT_REFLECTION_COLOR \u003d 0xFFFFFFFF;\n\n    private View view;\n    private Paint paint;\n\n    // center position of the gradient\n    private float gradientX;\n\n    // shader applied on the text view\n    // only null until the first global layout\n    private LinearGradient linearGradient;\n\n    // shader\u0027s local matrix\n    // never null\n    private Matrix linearGradientMatrix;\n\n    private int primaryColor;\n\n    // shimmer reflection color\n    private int reflectionColor;\n\n    // true when animating\n    private boolean isShimmering;\n\n    // true after first global layout\n    private boolean isSetUp;\n\n    // callback called after first global layout\n    private AnimationSetupCallback callback;\n\n    public ShimmerViewHelper(View view, Paint paint, AttributeSet attributeSet) {\n        this.view \u003d view;\n        this.paint \u003d paint;\n        init(attributeSet);\n    }\n\n    public float getGradientX() {\n        return gradientX;\n    }\n\n    public void setGradientX(float gradientX) {\n        this.gradientX \u003d gradientX;\n        view.invalidate();\n    }\n\n    public boolean isShimmering() {\n        return isShimmering;\n    }\n\n    public void setShimmering(boolean isShimmering) {\n        this.isShimmering \u003d isShimmering;\n    }\n\n    public boolean isSetUp() {\n        return isSetUp;\n    }\n\n    public void setAnimationSetupCallback(AnimationSetupCallback callback) {\n        this.callback \u003d callback;\n    }\n\n    public int getPrimaryColor() {\n        return primaryColor;\n    }\n\n    public void setPrimaryColor(int primaryColor) {\n        this.primaryColor \u003d primaryColor;\n        if (isSetUp) {\n            resetLinearGradient();\n        }\n    }\n\n    public int getReflectionColor() {\n        return reflectionColor;\n    }\n\n    public void setReflectionColor(int reflectionColor) {\n        this.reflectionColor \u003d reflectionColor;\n        if (isSetUp) {\n            resetLinearGradient();\n        }\n    }\n\n    private void init(AttributeSet attributeSet) {\n\n        reflectionColor \u003d DEFAULT_REFLECTION_COLOR;\n\n        if (attributeSet !\u003d null) {\n            /*\n            TypedArray a \u003d view.getContext().obtainStyledAttributes(attributeSet, R.styleable.ShimmerView, 0, 0);\n            if (a !\u003d null) {\n                try {\n                    reflectionColor \u003d a.getColor(R.styleable.ShimmerView_reflectionColor, DEFAULT_REFLECTION_COLOR);\n                } catch (Exception e) {\n                    android.util.Log.e(\"ShimmerTextView\", \"Error while creating the view:\", e);\n                } finally {\n                    a.recycle();\n                }\n            }\n            */\n            reflectionColor \u003d DEFAULT_REFLECTION_COLOR;\n        }\n\n        linearGradientMatrix \u003d new Matrix();\n    }\n\n    private void resetLinearGradient() {\n\n        // our gradient is a simple linear gradient from textColor to reflectionColor. its axis is at the center\n        // when it\u0027s outside of the view, the outer color (textColor) will be repeated (Shader.TileMode.CLAMP)\n        // initially, the linear gradient is positioned on the left side of the view\n        linearGradient \u003d new LinearGradient(-view.getWidth(), 0, 0, 0,\n                new int[]{\n                        primaryColor,\n                        reflectionColor,\n                        primaryColor,\n                },\n                new float[]{\n                        0,\n                        0.5f,\n                        1\n                },\n                Shader.TileMode.CLAMP\n        );\n\n        paint.setShader(linearGradient);\n    }\n\n    protected void onSizeChanged() {\n\n        resetLinearGradient();\n\n        if (!isSetUp) {\n            isSetUp \u003d true;\n\n            if (callback !\u003d null) {\n                callback.onSetupAnimation(view);\n            }\n        }\n    }\n\n    /**\n     * content of the wrapping view\u0027s onDraw(Canvas)\n     * MUST BE CALLED BEFORE SUPER STATEMENT\n     */\n    public void onDraw() {\n\n        // only draw the shader gradient over the text while animating\n        if (isShimmering) {\n\n            // first onDraw() when shimmering\n            if (paint.getShader() \u003d\u003d null) {\n                paint.setShader(linearGradient);\n            }\n\n            // translate the shader local matrix\n            linearGradientMatrix.setTranslate(2 * gradientX, 0);\n\n            // this is required in order to invalidate the shader\u0027s position\n            linearGradient.setLocalMatrix(linearGradientMatrix);\n\n        } else {\n            // we\u0027re not animating, remove the shader from the paint\n            paint.setShader(null);\n        }\n\n    }\n}\n\n\npublic class ShimmerTextView extends TextView implements ShimmerViewBase {\n\n    private ShimmerViewHelper shimmerViewHelper;\n\n    public ShimmerTextView(Context context) {\n        super(context);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), null);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    @Override\n    public float getGradientX() {\n        return shimmerViewHelper.getGradientX();\n    }\n\n    @Override\n    public void setGradientX(float gradientX) {\n        shimmerViewHelper.setGradientX(gradientX);\n    }\n\n    @Override\n    public boolean isShimmering() {\n        return shimmerViewHelper.isShimmering();\n    }\n\n    @Override\n    public void setShimmering(boolean isShimmering) {\n        shimmerViewHelper.setShimmering(isShimmering);\n    }\n\n    @Override\n    public boolean isSetUp() {\n        return shimmerViewHelper.isSetUp();\n    }\n\n    @Override\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback) {\n        shimmerViewHelper.setAnimationSetupCallback(callback);\n    }\n\n    @Override\n    public int getPrimaryColor() {\n        return shimmerViewHelper.getPrimaryColor();\n    }\n\n    @Override\n    public void setPrimaryColor(int primaryColor) {\n        shimmerViewHelper.setPrimaryColor(primaryColor);\n    }\n\n    @Override\n    public int getReflectionColor() {\n        return shimmerViewHelper.getReflectionColor();\n    }\n\n    @Override\n    public void setReflectionColor(int reflectionColor) {\n        shimmerViewHelper.setReflectionColor(reflectionColor);\n    }\n\n    @Override\n    public void setTextColor(int color) {\n        super.setTextColor(color);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    public void setTextColor(android.content.res.ColorStateList colors) {\n        super.setTextColor(colors);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onSizeChanged();\n        }\n    }\n\n    @Override\n    public void onDraw(Canvas canvas) {\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onDraw();\n        }\n        super.onDraw(canvas);\n    }\n}\n\n\npublic class ShimmerButton extends Button implements ShimmerViewBase {\n\n    private ShimmerViewHelper shimmerViewHelper;\n\n    public ShimmerButton(Context context) {\n        super(context);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), null);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerButton(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerButton(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    @Override\n    public float getGradientX() {\n        return shimmerViewHelper.getGradientX();\n    }\n\n    @Override\n    public void setGradientX(float gradientX) {\n        shimmerViewHelper.setGradientX(gradientX);\n    }\n\n    @Override\n    public boolean isShimmering() {\n        return shimmerViewHelper.isShimmering();\n    }\n\n    @Override\n    public void setShimmering(boolean isShimmering) {\n        shimmerViewHelper.setShimmering(isShimmering);\n    }\n\n    @Override\n    public boolean isSetUp() {\n        return shimmerViewHelper.isSetUp();\n    }\n\n    @Override\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback) {\n        shimmerViewHelper.setAnimationSetupCallback(callback);\n    }\n\n    @Override\n    public int getPrimaryColor() {\n        return shimmerViewHelper.getPrimaryColor();\n    }\n\n    @Override\n    public void setPrimaryColor(int primaryColor) {\n        shimmerViewHelper.setPrimaryColor(primaryColor);\n    }\n\n    @Override\n    public int getReflectionColor() {\n        return shimmerViewHelper.getReflectionColor();\n    }\n\n    @Override\n    public void setReflectionColor(int reflectionColor) {\n        shimmerViewHelper.setReflectionColor(reflectionColor);\n    }\n\n    @Override\n    public void setTextColor(int color) {\n        super.setTextColor(color);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    public void setTextColor(android.content.res.ColorStateList colors) {\n        super.setTextColor(colors);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onSizeChanged();\n        }\n    }\n\n    @Override\n    public void onDraw(Canvas canvas) {\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onDraw();\n        }\n        super.onDraw(canvas);\n    }\n}\n\npublic class Shimmer {\n\n    public static final int ANIMATION_DIRECTION_LTR \u003d 0;\n    public static final int ANIMATION_DIRECTION_RTL \u003d 1;\n\n    private static final int DEFAULT_REPEAT_COUNT \u003d android.animation.ValueAnimator.INFINITE;\n    private static final long DEFAULT_DURATION \u003d 1000;\n    private static final long DEFAULT_START_DELAY \u003d 0;\n    private static final int DEFAULT_DIRECTION \u003d ANIMATION_DIRECTION_LTR;\n\n    private int repeatCount;\n    private long duration;\n    private long startDelay;\n    private int direction;\n    private android.animation.Animator.AnimatorListener animatorListener;\n\n    private android.animation.ObjectAnimator animator;\n\n    public Shimmer() {\n        repeatCount \u003d DEFAULT_REPEAT_COUNT;\n        duration \u003d DEFAULT_DURATION;\n        startDelay \u003d DEFAULT_START_DELAY;\n        direction \u003d DEFAULT_DIRECTION;\n    }\n\n    public int getRepeatCount() {\n        return repeatCount;\n    }\n\n    public Shimmer setRepeatCount(int repeatCount) {\n        this.repeatCount \u003d repeatCount;\n        return this;\n    }\n\n    public long getDuration() {\n        return duration;\n    }\n\n    public Shimmer setDuration(long duration) {\n        this.duration \u003d duration;\n        return this;\n    }\n\n    public long getStartDelay() {\n        return startDelay;\n    }\n\n    public Shimmer setStartDelay(long startDelay) {\n        this.startDelay \u003d startDelay;\n        return this;\n    }\n\n    public int getDirection() {\n        return direction;\n    }\n\n    public Shimmer setDirection(int direction) {\n\n        if (direction !\u003d ANIMATION_DIRECTION_LTR \u0026\u0026 direction !\u003d ANIMATION_DIRECTION_RTL) {\n            throw new IllegalArgumentException(\"The animation direction must be either ANIMATION_DIRECTION_LTR or ANIMATION_DIRECTION_RTL\");\n        }\n\n        this.direction \u003d direction;\n        return this;\n    }\n\n    public android.animation.Animator.AnimatorListener getAnimatorListener() {\n        return animatorListener;\n    }\n\n    public Shimmer setAnimatorListener(android.animation.Animator.AnimatorListener animatorListener) {\n        this.animatorListener \u003d animatorListener;\n        return this;\n    }\n\n    public \u003cV extends View \u0026 ShimmerViewBase\u003e void start(final V shimmerView) {\n\n        if (isAnimating()) {\n            return;\n        }\n\n        final Runnable animate \u003d new Runnable() {\n            @Override\n            public void run() {\n\n                shimmerView.setShimmering(true);\n\n                float fromX \u003d 0;\n                float toX \u003d shimmerView.getWidth();\n                if (direction \u003d\u003d ANIMATION_DIRECTION_RTL) {\n                    fromX \u003d shimmerView.getWidth();\n                    toX \u003d 0;\n                }\n\n                animator \u003d android.animation.ObjectAnimator.ofFloat(shimmerView, \"gradientX\", fromX, toX);\n                animator.setRepeatCount(repeatCount);\n                animator.setDuration(duration);\n                animator.setStartDelay(startDelay);\n                animator.addListener(new android.animation.Animator.AnimatorListener() {\n                    @Override\n                    public void onAnimationStart(android.animation.Animator animation) {\n                    }\n\n                    @Override\n                    public void onAnimationEnd(android.animation.Animator animation) {\n                        shimmerView.setShimmering(false);\n\n                        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.JELLY_BEAN) {\n                            shimmerView.postInvalidate();\n                        } else {\n                            shimmerView.postInvalidateOnAnimation();\n                        }\n\n                        animator \u003d null;\n                    }\n\n                    @Override\n                    public void onAnimationCancel(android.animation.Animator animation) {\n\n                    }\n\n                    @Override\n                    public void onAnimationRepeat(android.animation.Animator animation) {\n\n                    }\n                });\n\n                if (animatorListener !\u003d null) {\n                    animator.addListener(animatorListener);\n                }\n\n                animator.start();\n            }\n        };\n\n        if (!shimmerView.isSetUp()) {\n            shimmerView.setAnimationSetupCallback(new ShimmerViewHelper.AnimationSetupCallback() {\n                @Override\n                public void onSetupAnimation(final View target) {\n                    animate.run();\n                }\n            });\n        } else {\n            animate.run();\n        }\n    }\n\n    public void cancel() {\n        if (animator !\u003d null) {\n            animator.cancel();\n        }\n    }\n\n    public boolean isAnimating() {\n        return animator !\u003d null \u0026\u0026 animator.isRunning();\n    }\n}\n","color":"#FF303F9F"},{"name":"Toasty Library","palette":"75","spec":"Toasty Library","typeName":"","type":" ","code":"\n\n\nfinal static class ToastyUtils {\n    private ToastyUtils() {\n    }\n\n    static android.graphics.drawable.Drawable tintIcon(android.graphics.drawable.Drawable drawable, int tintColor) {\n        drawable.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN);\n        return drawable;\n    }\n\n    static android.graphics.drawable.Drawable tint9PatchDrawableFrame(Context context, int tintColor) {\n        final android.graphics.drawable.NinePatchDrawable toastDrawable \u003d (android.graphics.drawable.NinePatchDrawable) getDrawable(context, R.drawable.toast_frame);\n        return tintIcon(toastDrawable, tintColor);\n    }\n\n    static void setBackground(View view, android.graphics.drawable.Drawable drawable) {\n        if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.JELLY_BEAN)\n            view.setBackground(drawable);\n        else\n            view.setBackgroundDrawable(drawable);\n    }\n\n    static android.graphics.drawable.Drawable getDrawable(Context context, int id) {\n        if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.LOLLIPOP)\n            return context.getDrawable(id);\n        else\n            return context.getResources().getDrawable(id);\n    }\n}\n\n\n\n\n\npublic static class Toasty {\n    \n    private static int DEFAULT_TEXT_COLOR \u003d Color.parseColor(\"#FFFFFF\");\n    \n    private static int ERROR_COLOR \u003d Color.parseColor(\"#D50000\");\n    \n    private static int INFO_COLOR \u003d Color.parseColor(\"#3F51B5\");\n    \n    private static int SUCCESS_COLOR \u003d Color.parseColor(\"#388E3C\");\n    \n    private static int WARNING_COLOR \u003d Color.parseColor(\"#FFA900\");\n    \n    private static int NORMAL_COLOR \u003d Color.parseColor(\"#353A3E\");\n\n    private static final Typeface LOADED_TOAST_TYPEFACE \u003d Typeface.create(\"sans-serif-condensed\", Typeface.NORMAL);\n    private static Typeface currentTypeface \u003d LOADED_TOAST_TYPEFACE;\n    private static int textSize \u003d 16; // in SP\n\n    private static boolean tintIcon \u003d true;\n\n    private Toasty() {\n        // avoiding instantiation\n    }\n\n\n    public static Toast normal(Context context, CharSequence message) {\n        return normal(context, message, Toast.LENGTH_SHORT, null, false);\n    }\n\n    \n    public static Toast normal(Context context, CharSequence message, android.graphics.drawable.Drawable icon) {\n        return normal(context, message, Toast.LENGTH_SHORT, icon, true);\n    }\n\n    public static Toast normal(Context context, CharSequence message, int duration) {\n        return normal(context, message, duration, null, false);\n    }\n\n\n    public static Toast normal(Context context, CharSequence message, int duration,\n                               android.graphics.drawable.Drawable icon) {\n        return normal(context, message, duration, icon, true);\n    }\n\n\n    public static Toast normal(Context context, CharSequence message, int duration,\n                               android.graphics.drawable.Drawable icon, boolean withIcon) {\n        return custom(context, message, icon, NORMAL_COLOR, duration, withIcon, true);\n    }\n\n\n    public static Toast warning(Context context, CharSequence message) {\n        return warning(context, message, Toast.LENGTH_SHORT, true);\n    }\n    \n\n    public static Toast warning(Context context, CharSequence message, int duration) {\n        return warning(context, message, duration, true);\n    }\n\n    public static Toast warning(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_error_outline_white_48dp),\n                WARNING_COLOR, duration, withIcon, true);\n    }\n\n    public static Toast info(Context context, CharSequence message) {\n        return info(context, message, Toast.LENGTH_SHORT, true);\n    }\n\n    \n    public static Toast info(Context context, CharSequence message, int duration) {\n        return info(context, message, duration, true);\n    }\n\n\n    public static Toast info(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_info_outline_white_48dp),\n                INFO_COLOR, duration, withIcon, true);\n    }\n\n     \n    public static Toast success(Context context, CharSequence message) {\n        return success(context, message, Toast.LENGTH_SHORT, true);\n    }\n\n     \n    public static Toast success(Context context, CharSequence message, int duration) {\n        return success(context, message, duration, true);\n    }\n\n     \n    public static Toast success(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_check_white_48dp),\n               SUCCESS_COLOR, duration, withIcon, true);\n    }\n\n     \n    public static Toast error(Context context, CharSequence message) {\n        return error(context, message, Toast.LENGTH_SHORT, true);\n    }\n\n     \n    public static Toast error(Context context, CharSequence message, int duration) {\n        return error(context, message, duration, true);\n    }\n\n     \n    public static Toast error(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_clear_white_48dp),\n                ERROR_COLOR, duration, withIcon, true);\n    }\n\n     \n    public static Toast custom(Context context, CharSequence message, android.graphics.drawable.Drawable icon,\n                               int duration, boolean withIcon) {\n        return custom(context, message, icon, -1, duration, withIcon, false);\n    }\n\n     \n    public static Toast custom(Context context, CharSequence message, int iconRes,\n                               int tintColor, int duration,\n                               boolean withIcon, boolean shouldTint) {\n        return custom(context, message, ToastyUtils.getDrawable(context, iconRes),\n                tintColor, duration, withIcon, shouldTint);\n    }\n\n     \n    public static Toast custom(Context context, CharSequence message, android.graphics.drawable.Drawable icon,\n                               int tintColor, int duration,\n                               boolean withIcon, boolean shouldTint) {\n        final Toast currentToast \u003d new Toast(context);\n        final View toastLayout \u003d ((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.toast_layout, null);\n        final ImageView toastIcon \u003d (ImageView) toastLayout.findViewById(R.id.toast_icon);\n        final TextView toastTextView \u003d (TextView) toastLayout.findViewById(R.id.toast_text);\n        android.graphics.drawable.Drawable drawableFrame;\n\n        if (shouldTint)\n            drawableFrame \u003d ToastyUtils.tint9PatchDrawableFrame(context, tintColor);\n        else\n            drawableFrame \u003d ToastyUtils.getDrawable(context, R.drawable.toast_frame);\n        ToastyUtils.setBackground(toastLayout, drawableFrame);\n\n        if (withIcon) {\n            if (icon \u003d\u003d null)\n                throw new IllegalArgumentException(\"Avoid passing \u0027icon\u0027 as null if \u0027withIcon\u0027 is set to true\");\n            if (tintIcon)\n                icon \u003d ToastyUtils.tintIcon(icon, DEFAULT_TEXT_COLOR);\n            ToastyUtils.setBackground(toastIcon, icon);\n        } else {\n            toastIcon.setVisibility(View.GONE);\n        }\n\n        toastTextView.setText(message);\n        toastTextView.setTextColor(DEFAULT_TEXT_COLOR);\n        toastTextView.setTypeface(currentTypeface);\n        toastTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, textSize);\n\n        currentToast.setDuration(duration);\n        currentToast.setView(toastLayout);\n        return currentToast;\n    }\n\n    public static class Config {\n        \n        private int DEFAULT_TEXT_COLOR \u003d Toasty.DEFAULT_TEXT_COLOR;\n        \n        private int ERROR_COLOR \u003d Toasty.ERROR_COLOR;\n        \n        private int INFO_COLOR \u003d Toasty.INFO_COLOR;\n        \n        private int SUCCESS_COLOR \u003d Toasty.SUCCESS_COLOR;\n        \n        private int WARNING_COLOR \u003d Toasty.WARNING_COLOR;\n\n        private Typeface typeface \u003d Toasty.currentTypeface;\n        private int textSize \u003d Toasty.textSize;\n\n        private boolean tintIcon \u003d Toasty.tintIcon;\n\n        private Config() {\n            // avoiding instantiation\n        }\n\n         \n        public static Config getInstance() {\n            return new Config();\n        }\n\n        public static void reset() {\n            Toasty.DEFAULT_TEXT_COLOR \u003d Color.parseColor(\"#FFFFFF\");\n            Toasty.ERROR_COLOR \u003d Color.parseColor(\"#D50000\");\n            Toasty.INFO_COLOR \u003d Color.parseColor(\"#3F51B5\");\n            Toasty.SUCCESS_COLOR \u003d Color.parseColor(\"#388E3C\");\n            Toasty.WARNING_COLOR \u003d Color.parseColor(\"#FFA900\");\n            Toasty.currentTypeface \u003d LOADED_TOAST_TYPEFACE;\n            Toasty.textSize \u003d 16;\n            Toasty.tintIcon \u003d true;\n        }\n\n         \n        public Config setTextColor(int textColor) {\n            DEFAULT_TEXT_COLOR \u003d textColor;\n            return this;\n        }\n\n         \n        public Config setErrorColor(int errorColor) {\n            ERROR_COLOR \u003d errorColor;\n            return this;\n        }\n\n         \n        public Config setInfoColor(int infoColor) {\n            INFO_COLOR \u003d infoColor;\n            return this;\n        }\n\n         \n        public Config setSuccessColor(int successColor) {\n            SUCCESS_COLOR \u003d successColor;\n            return this;\n        }\n\n         \n        public Config setWarningColor(int warningColor) {\n            WARNING_COLOR \u003d warningColor;\n            return this;\n        }\n\n         \n        public Config setToastTypeface(Typeface typeface) {\n            this.typeface \u003d typeface;\n            return this;\n        }\n\n         \n        public Config setTextSize(int sizeInSp) {\n            this.textSize \u003d sizeInSp;\n            return this;\n        }\n\n         \n        public Config tintIcon(boolean tintIcon) {\n            this.tintIcon \u003d tintIcon;\n            return this;\n        }\n\n        public void apply() {\n            Toasty.DEFAULT_TEXT_COLOR \u003d DEFAULT_TEXT_COLOR;\n            Toasty.ERROR_COLOR \u003d ERROR_COLOR;\n            Toasty.INFO_COLOR \u003d INFO_COLOR;\n            Toasty.SUCCESS_COLOR \u003d SUCCESS_COLOR;\n            Toasty.WARNING_COLOR \u003d WARNING_COLOR;\n            Toasty.currentTypeface \u003d typeface;\n            Toasty.textSize \u003d textSize;\n            Toasty.tintIcon \u003d tintIcon;\n        }\n    }\n}\n\n","color":"#FF303F9F"},{"name":"Titanic TextView","palette":"75","spec":"Titanic textview library","type":" ","typeName":"","color":"#FF303F9F","code":"\n}\n\n\npublic class Titanic {\n\n    private AnimatorSet animatorSet;\n    private Animator.AnimatorListener animatorListener;\n\n    public Animator.AnimatorListener getAnimatorListener() {\n        return animatorListener;\n    }\n\n    public void setAnimatorListener(Animator.AnimatorListener animatorListener) {\n        this.animatorListener \u003d animatorListener;\n    }\n\n    public void start(final TitanicTextView textView) {\n\n        final Runnable animate \u003d new Runnable() {\n            @Override\n            public void run() {\n\n                textView.setSinking(true);\n\n                // horizontal animation. 200 \u003d wave.png width\n                ObjectAnimator maskXAnimator \u003d ObjectAnimator.ofFloat(textView, \"maskX\", 0, 200);\n                maskXAnimator.setRepeatCount(ValueAnimator.INFINITE);\n                maskXAnimator.setDuration(1000);\n                maskXAnimator.setStartDelay(0);\n\n                int h \u003d textView.getHeight();\n\n                // vertical animation\n                // maskY \u003d 0 -\u003e wave vertically centered\n                // repeat mode REVERSE to go back and forth\n                ObjectAnimator maskYAnimator \u003d ObjectAnimator.ofFloat(textView, \"maskY\", h/2, - h/2);\n                maskYAnimator.setRepeatCount(ValueAnimator.INFINITE);\n                maskYAnimator.setRepeatMode(ValueAnimator.REVERSE);\n                maskYAnimator.setDuration(10000);\n                maskYAnimator.setStartDelay(0);\n\n                // now play both animations together\n                animatorSet \u003d new AnimatorSet();\n                animatorSet.playTogether(maskXAnimator, maskYAnimator);\n                animatorSet.setInterpolator(new LinearInterpolator());\n                animatorSet.addListener(new Animator.AnimatorListener() {\n                    @Override\n                    public void onAnimationStart(Animator animation) {\n                    }\n\n                    @Override\n                    public void onAnimationEnd(Animator animation) {\n                        textView.setSinking(false);\n\n                        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.JELLY_BEAN) {\n                            textView.postInvalidate();\n                        } else {\n                            textView.postInvalidateOnAnimation();\n                        }\n\n                        animatorSet \u003d null;\n                    }\n\n                    @Override\n                    public void onAnimationCancel(Animator animation) {\n\n                    }\n\n                    @Override\n                    public void onAnimationRepeat(Animator animation) {\n\n                    }\n                });\n\n\n                if (animatorListener !\u003d null) {\n                    animatorSet.addListener(animatorListener);\n                }\n\n                animatorSet.start();\n            }\n        };\n\n        if (!textView.isSetUp()) {\n            textView.setAnimationSetupCallback(new AnimationSetupCallback() {\n                @Override\n                public void onSetupAnimation(final TitanicTextView target) {\n                    animate.run();\n                }\n            });\n        } else {\n            animate.run();\n        }\n    }\n\n    public void cancel() {\n        if (animatorSet !\u003d null) {\n            animatorSet.cancel();\n        }\n    }\n}\n\n\npublic interface AnimationSetupCallback {\n        public void onSetupAnimation(TitanicTextView titanicTextView);\n    }\n\n\npublic class TitanicTextView extends TextView {\n    // callback fired at first onSizeChanged\n    private AnimationSetupCallback animationSetupCallback;\n    // wave shader coordinates\n    private float maskX, maskY;\n    // if true, the shader will display the wave\n    private boolean sinking;\n    // true after the first onSizeChanged\n    private boolean setUp;\n\n    // shader containing a repeated wave\n    private BitmapShader shader;\n    // shader matrix\n    private Matrix shaderMatrix;\n    // wave drawable\n    private android.graphics.drawable.Drawable wave;\n    // (getHeight() - waveHeight) / 2\n    private float offsetY;\n\n    public TitanicTextView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TitanicTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TitanicTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        shaderMatrix \u003d new Matrix();\n    }\n\n    public AnimationSetupCallback getAnimationSetupCallback() {\n        return animationSetupCallback;\n    }\n\n    public void setAnimationSetupCallback(AnimationSetupCallback animationSetupCallback) {\n        this.animationSetupCallback \u003d animationSetupCallback;\n    }\n\n    public float getMaskX() {\n        return maskX;\n    }\n\n    public void setMaskX(float maskX) {\n        this.maskX \u003d maskX;\n        invalidate();\n    }\n\n    public float getMaskY() {\n        return maskY;\n    }\n\n    public void setMaskY(float maskY) {\n        this.maskY \u003d maskY;\n        invalidate();\n    }\n\n    public boolean isSinking() {\n        return sinking;\n    }\n\n    public void setSinking(boolean sinking) {\n        this.sinking \u003d sinking;\n    }\n\n    public boolean isSetUp() {\n        return setUp;\n    }\n\n    @Override\n    public void setTextColor(int color) {\n        super.setTextColor(color);\n        createShader();\n    }\n\n    @Override\n    public void setTextColor(android.content.res.ColorStateList colors) {\n        super.setTextColor(colors);\n        createShader();\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n\n        createShader();\n\n        if (!setUp) {\n            setUp \u003d true;\n            if (animationSetupCallback !\u003d null) {\n                animationSetupCallback.onSetupAnimation(TitanicTextView.this);\n            }\n        }\n    }\n\n    /**\n     * Create the shader\n     * draw the wave with current color for a background\n     * repeat the bitmap horizontally, and clamp colors vertically\n     */\n    @SuppressWarnings(\"deprecation\")\n    private void createShader() {\n\n        if (wave \u003d\u003d null) {\n            wave \u003d getResources().getDrawable(R.drawable.wave);\n        }\n\n        int waveW \u003d wave.getIntrinsicWidth();\n        int waveH \u003d wave.getIntrinsicHeight();\n\n        Bitmap b \u003d Bitmap.createBitmap(waveW, waveH, Bitmap.Config.ARGB_8888);\n        Canvas c \u003d new Canvas(b);\n\n        c.drawColor(getCurrentTextColor());\n\n        wave.setBounds(0, 0, waveW, waveH);\n        wave.draw(c);\n\n        shader \u003d new BitmapShader(b, Shader.TileMode.REPEAT, Shader.TileMode.CLAMP);\n        getPaint().setShader(shader);\n\n        offsetY \u003d (getHeight() - waveH) / 2;\n \n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n\n        // modify text paint shader according to sinking state\n        if (sinking \u0026\u0026 shader !\u003d null) {\n\n            // first call after sinking, assign it to our paint\n            if (getPaint().getShader() \u003d\u003d null) {\n                getPaint().setShader(shader);\n            }\n\n            // translate shader accordingly to maskX maskY positions\n            // maskY is affected by the offset to vertically center the wave\n            shaderMatrix.setTranslate(maskX, maskY + offsetY);\n\n            // assign matrix to invalidate the shader\n            shader.setLocalMatrix(shaderMatrix);\n        } else {\n            getPaint().setShader(null);\n        }\n\n        super.onDraw(canvas);\n    }\n}\n\npublic void nothing() {\n"}]