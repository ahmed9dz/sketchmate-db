[{"name":"ArabWare    ","palette":"24","spec":"This By Arab Ware Channel Dont Dont Dont Edit it هذا بواسطة قناة عرب وير بواسطة امير عزت اياك و تعديله","type":"h","typeName":"","color":"#FFC2185B","code":""},{"name":"pdf library","palette":"24","spec":"pdf library | in more block |","type":" ","typeName":"","color":"#FFC2185B","code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\nrenderer;\nZoomableImageView touch;\r\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\n\n    \r\n{"},{"name":"Something Needs Storage permission or another  arab ware","palette":"24","spec":"Something Needs Storage permission or another","typeName":"","type":"h","code":"","color":"#FFC2185B"},{"name":"Display PDF With Page","palette":"24","spec":"display pdf file with page %d","typeName":"","type":" ","code":"android.graphics.pdf.PdfRenderer.Page page \u003d renderer.openPage((int)%1$s);\n\nBitmap mBitmap \u003d Bitmap.createBitmap((int)getDip(page.getWidth()), (int)getDip(page.getHeight()), Bitmap.Config.ARGB_8888);\n\npage.render(mBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\ntouch.setImageBitmap(mBitmap);\n\npage.close();","color":"#FFC2185B"},{"spec2":"if there is error then","typeName":"","color":"#FFC2185B","name":"Try Display Pdf","palette":"24","spec":"Try Display Pdf from path %s","type":"e","code":"try {\nrenderer \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(%s), ParcelFileDescriptor.MODE_READ_ONLY)));\n%s\n} catch (Exception e){\n%s\n}"},{"name":"Display Pdf Into","palette":"24","spec":"Display Pdf Into %m.view","typeName":"","type":" ","code":"touch \u003d new\nZoomableImageView(this);\n%s.addView(touch);","color":"#FFC2185B"},{"name":"Get Total Pages","palette":"24","spec":"get total pdf file pages","type":"d","typeName":"","color":"#FFC2185B","code":"renderer.getPageCount()"}]