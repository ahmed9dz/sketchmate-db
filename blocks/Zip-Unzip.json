[{"name":"Add By Arab Ware","palette":"59","spec":"Added By Arab Ware","typeName":"","type":"h","code":"","color":"#FF0097A7"},{"name":"Zip","palette":"59","spec":"Zip path %s.inputOnly  to path %s.inputOnly with file name %s.inputOnly ","type":" ","typeName":"","color":"#FF0097A7","code":"try {\n\tjava.util.zip.ZipOutputStream os \u003d new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(\"%2$s/%3$s\"));\n\t\t\tzip(os, \"%1$s\", null);\n\t\t\tos.close();\n}\n\ncatch(java.io.IOException e) {}\r\n}\r\nprivate void zip(java.util.zip.ZipOutputStream os, String filePath, String name) throws java.io.IOException\n\t{\n\t\tjava.io.File file \u003d new java.io.File(filePath);\n\t\tjava.util.zip.ZipEntry entry \u003d new java.util.zip.ZipEntry((name !\u003d null ? name + java.io.File.separator : \"\") + file.getName() + (file.isDirectory() ? java.io.File.separator : \"\"));\n\t\tos.putNextEntry(entry);\n\t\t\n\t\tif(file.isFile()) {\n\t\t\t\tjava.io.InputStream is \u003d new java.io.FileInputStream(file);\n\t\t\t\tint size \u003d is.available();\n\t\t\t\tbyte[] buff \u003d new byte[size];\n\t\t\t\tint len \u003d is.read(buff);\n\t\t\t\tos.write(buff, 0, len);\n\t\t\t\treturn;\n\t\t}\n\t\t\n\t\tjava.io.File[] fileArr \u003d file.listFiles();\n\t\tfor(java.io.File subFile : fileArr) {\n\t\t\t\tzip(os, subFile.getAbsolutePath(), entry.getName());\n\t\t}"},{"name":"Unzip","palette":"59","spec":"Unzip file from path %s.inputOnly to path %s.inputOnly ","typeName":"","type":" ","code":"try\r\n{\r\n\tjava.io.File outdir \u003d new java.io.File(%2$s);\r\n\tjava.util.zip.ZipInputStream zin \u003d new java.util.zip.ZipInputStream(new java.io.FileInputStream(%1$s));\r\n\tjava.util.zip.ZipEntry entry;\r\n\tString name, dir;\r\n\twhile ((entry \u003d zin.getNextEntry()) !\u003d null)\r\n\t{\r\n\t\tname \u003d entry.getName();\r\n\t\tif(entry.isDirectory())\r\n\t\t{\r\n\t\t\tmkdirs(outdir, name);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\t/* this part is necessary because file entry can come before\r\n* directory entry where is file located\r\n* i.e.:\r\n* /foo/foo.txt\r\n* /foo/\r\n*/\r\n\t\t\r\n\t\tdir \u003d dirpart(name);\r\n\t\tif(dir !\u003d null)\r\n\t\tmkdirs(outdir, dir);\r\n\t\t\r\n\t\textractFile(zin, outdir, name);\r\n\t}\r\n\tzin.close();\r\n}\r\ncatch (java.io.IOException e)\r\n{\r\n\te.printStackTrace();\r\n}\r\n}\r\nprivate static void extractFile(java.util.zip.ZipInputStream in, java.io.File outdir, String name) throws java.io.IOException\r\n{\r\nbyte[] buffer \u003d new byte[4096];\r\njava.io.BufferedOutputStream out \u003d new java.io.BufferedOutputStream(new java.io.FileOutputStream(new java.io.File(outdir, name)));\r\nint count \u003d -1;\r\nwhile ((count \u003d in.read(buffer)) !\u003d -1)\r\nout.write(buffer, 0, count);\r\nout.close();\r\n}\r\n\r\nprivate static void mkdirs(java.io.File outdir, String path)\r\n{\r\njava.io.File d \u003d new java.io.File(outdir, path);\r\nif(!d.exists())\r\nd.mkdirs();\r\n}\r\n\r\nprivate static String dirpart(String name)\r\n{\r\nint s \u003d name.lastIndexOf(java.io.File.separatorChar);\r\nreturn s \u003d\u003d -1 ? null : name.substring(0, s);","color":"#FF0097A7"}]