[{"name":"DraggerLibrary","palette":"97","spec":"\u003e\u003e\u003e\u003e DraggerLibrary \u003c\u003c\u003c\u003c","typeName":"","type":" ","code":"}public static class Dragger {\n    private View dragView;\n    private View[] targetViews;\n    private float dX, dY;\n    private int initXY[] \u003d new int[2];\n    private boolean isInitXy \u003d false;\n    private boolean eventSuccess \u003d false;\n    private DragEventListener dragEventListener;\n    private View view;\n    public Dragger(View dragView, View[] targetViews) {\n        this.dragView \u003d dragView;\n        this.targetViews \u003d targetViews;\n    }\n    public Dragger() {\n    }\n    public static Dragger create(){\n        return new Dragger();\n    }\n    public Dragger setDragView(View dragView) {\n        this.dragView \u003d dragView;\n        return this;\n    }\n    public Dragger setTargetViews(View[] targetViews) {\n        this.targetViews \u003d targetViews;\n        return this;\n    }\n    public Dragger setDragEventListener(DragEventListener dragEventListener) {\n        this.dragEventListener \u003d dragEventListener;\n        return this;\n    }\n    public void startDragging(){\n        if(dragView \u003d\u003d null){\n            return;\n        }\n        if(targetViews \u003d\u003d null){\n            return;\n        }\n        dragView.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        dX \u003d dragView.getX() - event.getRawX();\n                        dY \u003d dragView.getY() - event.getRawY();\n                        if(!isInitXy) {\n                            dragView.getLocationInWindow(initXY);\n                            isInitXy \u003d true;\n                        }\n                        break;\n                    case MotionEvent.ACTION_MOVE:\n                        dragView.animate()\n                                .x(event.getRawX() + dX)\n                                .y(event.getRawY() + dY)\n                                .setDuration(0)\n                                .start();\n                        for(int i\u003d0;i\u003ctargetViews.length;i++) {\n                            if (isViewInBounds(targetViews[i], event.getRawX(), event.getRawY())) {\n                                Dragger.this.view \u003d targetViews[i];\n                                eventSuccess \u003d true;\n                                break;\n                            }\n                            else {\n                                eventSuccess \u003d false;\n                            }\n                        }\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        if(!eventSuccess) {\n                            dragView.animate()\n                                    .x(initXY[0])\n                                    .y(initXY[1])\n                                    .setDuration(0)\n                                    .start();\n                        }else {\n                            if(dragEventListener !\u003d null)\n                                dragEventListener.onDragComplete(view);\n                        }\n                    default:\n                        return false;\n                }\n                return true;\n            }\n        });\n    }\n    private Rect rect \u003d new Rect();\n    private int[] location \u003d new int[2];\n    private boolean isViewInBounds(View target, float x, float y){\n        target.getDrawingRect(rect);\n        target.getLocationOnScreen(location);\n        rect.offset(location[0], location[1]);\n        return rect.contains((int) x, (int)y);\n    }\n    public interface DragEventListener{\n        public void onDragComplete(View targetView);\n    }\n","color":"#CAC319"},{"name":"setDragView","palette":"97","spec":"setDragView %m.view and setTargetViews%m.view  When onDragComplete","typeName":"","type":"c","code":"Dragger.create().setDragView(%s)\n\t.setTargetViews(new View[]{%s})\n\t.setDragEventListener(new Dragger.DragEventListener() {\n\t@Override\n\tpublic void onDragComplete(View targetView) {\n%s\n\t}\n}).startDragging();","color":"#CAC319"},{"name":"ViewAndView","palette":"97","spec":"%m.view and %m.view","typeName":"view","type":"p","code":"%s,%s","color":"#CAC319"},{"name":"viewIsTargetView","palette":"97","spec":"%m.view isTargetView","typeName":"","type":"b","code":"targetView.equals(%s)","color":"#CAC319"}]