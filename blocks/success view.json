[{"name":"SuccessViewLib","palette":"127","spec":"##SuccessViewLib (add to Mblock)##","type":" ","code":"\r}\npublic static class SuccessView extends View {\r\n    private float mDensity \u003d -1;\r\n    private Paint mPaint, nPaint;\r\n    private float minWidth;\r\n    private float minHeight;\r\n    private float angle, startAngle \u003d -90;\r\n    private final float CONST_RADIUS \u003d dip2px(1.2f);\r\n    private final float CONST_RECT_WEIGHT \u003d dip2px(3);\r\n    private final float CONST_LEFT_RECT_W \u003d dip2px(15);\r\n    private final float CONST_RIGHT_RECT_W \u003d dip2px(25);\r\n    private float mLeftRectWidth \u003d 0;\r\n    private float mRightRectWidth \u003d 0;\r\n    private int pColor \u003d 0xffA5DC86;\r\n    private float strokeWidth \u003d 2.5f;\r\n    public SuccessView(Context context) {\r\n        this(context, null);\r\n    }\r\n    public SuccessView(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n    public SuccessView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(attrs);\r\n    }\r\n    private void init(AttributeSet attrs) {\r\n        minWidth \u003d dip2px(50);\r\n        minHeight \u003d dip2px(50);\r\n        mPaint \u003d new Paint();\r\n        mPaint.setColor(pColor);\r\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\r\n        mPaint.setStrokeWidth(0.8f);\r\n        mPaint.setAntiAlias(true);\r\n        nPaint \u003d new Paint();\r\n        nPaint.setAntiAlias(true);\r\n        nPaint.setStyle(Paint.Style.STROKE);\r\n        nPaint.setStrokeWidth(dip2px(strokeWidth));\r\n        nPaint.setColor(pColor);\r\n    }\r\n\tpublic void setColor(int color) {\r\n\t\tminWidth \u003d dip2px(50);\r\n        minHeight \u003d dip2px(50);\r\n        mPaint \u003d new Paint();\r\n        mPaint.setColor(color);\r\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\r\n        mPaint.setStrokeWidth(0.8f);\r\n        mPaint.setAntiAlias(true);\r\n        nPaint \u003d new Paint();\r\n        nPaint.setAntiAlias(true);\r\n        nPaint.setStyle(Paint.Style.STROKE);\r\n        nPaint.setStrokeWidth(dip2px(strokeWidth));\r\n        nPaint.setColor(color);\r\n\t}\r\n\tpublic void setStrokeWidth(float stroke) {\r\n\t\tminWidth \u003d dip2px(50);\r\n        minHeight \u003d dip2px(50);\r\n        mPaint \u003d new Paint();\r\n        mPaint.setColor(pColor);\r\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\r\n        mPaint.setStrokeWidth(0.8f);\r\n        mPaint.setAntiAlias(true);\r\n        nPaint \u003d new Paint();\r\n        nPaint.setAntiAlias(true);\r\n        nPaint.setStyle(Paint.Style.STROKE);\r\n        nPaint.setStrokeWidth(dip2px(stroke));\r\n        nPaint.setColor(pColor);\r\n\t}\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        Rect bounds \u003d canvas.getClipBounds();\r\n        float left, right, top, bottom;\r\n        if (bounds.width() \u003e bounds.height()) {\r\n            float distance \u003d (bounds.width() / 2 - bounds.height() / 2);\r\n            left \u003d bounds.left + distance;\r\n            right \u003d bounds.right - distance;\r\n            top \u003d bounds.top;\r\n            bottom \u003d bounds.bottom;\r\n        } else if (bounds.width() \u003c bounds.height()) {\r\n            float distance \u003d (bounds.height() / 2 - bounds.width() / 2);\r\n            top \u003d bounds.top + distance;\r\n            bottom \u003d bounds.bottom - distance;\r\n            left \u003d bounds.left;\r\n            right \u003d bounds.right;\r\n        } else {\r\n            left \u003d bounds.left;\r\n            right \u003d bounds.right;\r\n            top \u003d bounds.top;\r\n            bottom \u003d bounds.bottom;\r\n        }\r\n        RectF oval \u003d new RectF(left + dip2px(2f), top + dip2px(2f), right - dip2px(2f), bottom - dip2px(2f));\r\n        canvas.drawArc(oval, startAngle, angle, false, nPaint);\r\n        int totalW \u003d getWidth();\r\n        int totalH \u003d getHeight();\r\n        canvas.rotate(45, totalW / 2, totalH / 2);\r\n        totalW /\u003d 1.2;\r\n        totalH /\u003d 1.4;\r\n        RectF leftRect \u003d new RectF();\r\n        if (mLeftRectWidth \u003e 0) {\r\n            leftRect.left \u003d (totalW - CONST_LEFT_RECT_W) / 2 + CONST_RECT_WEIGHT;\r\n            leftRect.right \u003d leftRect.left + dip2px(mLeftRectWidth);\r\n            leftRect.top \u003d (totalH + CONST_RIGHT_RECT_W) / 2;\r\n            leftRect.bottom \u003d leftRect.top + CONST_RECT_WEIGHT;\r\n            canvas.drawRoundRect(leftRect, CONST_RADIUS, CONST_RADIUS, mPaint);\r\n        }\r\n        if (mRightRectWidth \u003e 0) {\r\n            RectF rightRect \u003d new RectF();\r\n            rightRect.bottom \u003d (totalH + CONST_RIGHT_RECT_W) / 2 + CONST_RECT_WEIGHT - 1;\r\n            rightRect.left \u003d (totalW + CONST_LEFT_RECT_W) / 2;\r\n            rightRect.right \u003d rightRect.left + CONST_RECT_WEIGHT;\r\n            rightRect.top \u003d rightRect.bottom - dip2px(mRightRectWidth);\r\n            canvas.drawRoundRect(rightRect, CONST_RADIUS, CONST_RADIUS, mPaint);\r\n        }\r\n        super.onDraw(canvas);\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int widthMode \u003d MeasureSpec.getMode(widthMeasureSpec);\r\n        int widthSize \u003d MeasureSpec.getSize(widthMeasureSpec);\r\n        int heightMode \u003d MeasureSpec.getMode(heightMeasureSpec);\r\n        int heightSize \u003d MeasureSpec.getSize(heightMeasureSpec);\r\n        int width;\r\n        int height;\r\n        if (widthMode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            width \u003d widthSize;\r\n        } else {\r\n            width \u003d (int) (getPaddingLeft() + minWidth + getPaddingRight());\r\n        }\r\n        if (heightMode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            height \u003d heightSize;\r\n        } else {\r\n            height \u003d (int) (getPaddingTop() + minHeight + getPaddingBottom());\r\n        }\r\n        setMeasuredDimension(width, height);\r\n    }\r\n    public float dip2px(float dpValue) {\r\n        if (mDensity \u003d\u003d -1) {\r\n            mDensity \u003d getResources().getDisplayMetrics().density;\r\n        }\r\n        return dpValue * mDensity + 0.5f;\r\n    }\r\n    public void startAnim(int startDelay) {\r\n        clearAnimation();\r\n        ValueAnimator animator \u003d ValueAnimator.ofFloat(0, 60f, 120f, 180f, 240f, 300f, 360f, 375f, 400f);\r\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\r\n                float value \u003d (float) valueAnimator.getAnimatedValue();\r\n                angle \u003d -value;\r\n                if (value\u003e360 \u0026\u0026 value\u003c\u003d375){\r\n                    mLeftRectWidth \u003d value - 360;\r\n                }else if(value\u003e375){\r\n                    mRightRectWidth \u003d value - 375;\r\n                }\r\n                invalidate();\r\n            }\r\n        });\r\n        animator.setDuration(1000);\r\n        animator.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator.setStartDelay(startDelay);\r\n        animator.start();\r\n    }\r\n}\n{"},{"name":"SuccessView","palette":"127","spec":"SuccessView ID %s.inputOnly on %m.view","type":" ","code":"SuccessView %1$s \u003d new SuccessView(this);\r\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.startAnim(200);\r\n%1$s.setColor(Color.parseColor(\"#FF0000\"));\r\n%1$s.setStrokeWidth(5);\r\n%2$s.addView(%1$s);"}]