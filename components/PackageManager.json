[{"Components":"{\"defineAdditionalVar\":\"\",\"varName\":\"android.content.pm.PackageManager\",\"imports\":\"\",\"icon\":\"2131165675\",\"typeName\":\"package\",\"name\":\"PackageManager\",\"description\":\"For add package manager variable\\n\\nAlso you can use it in If Family Blocks\",\"id\":\"47\",\"class\":\"android.content.pm.PackageManager\",\"buildClass\":\"android.content.pm.PackageManager\",\"url\":\"\",\"additionalVar\":\"\"}"},{"Listeners":""},{"Events":"{\"code\":\"private void initSpeedDial(boolean _addActionItems, View _view) {\\n%s\\n}\",\"headerSpec\":\"when SpeedDialView listen %b.addActionItems\",\"var\":\"SpeedDialView\",\"icon\":\"2131165565\",\"name\":\"initSpeedDial\",\"listener\":\"SpeedDialView\",\"description\":\"This is listener when fab button speed dial click\",\"parameters\":\"%b\"},{\"code\":\"public void _ArabWareChannel () {\\ntry {\\nRuntime.getRuntime().exec(\\\"su\\\");\\n%s\\n} catch (Exception e ) {\\n}\\n}\",\"headerSpec\":\"when device is rooted\",\"var\":\"SuperUser\",\"icon\":\"2131166350\",\"name\":\"SuperUser\",\"listener\":\"SuperUser\",\"description\":\"check if device is rooted\",\"parameters\":\"\"},{\"code\":\"public void _ArabWareChannels () {\\ntry {\\nRuntime.getRuntime().exec(\\\"su\\\");\\n} catch (Exception e ) {\\n%s\\n}\\n}\",\"headerSpec\":\"when device not rooted\",\"var\":\"SuperUser\",\"icon\":\"2131166349\",\"name\":\"Normal User\",\"listener\":\"SuperUser\",\"description\":\"use it to check if device not rooted\",\"parameters\":\"\"},{\"code\":\"@Override \\npublic boolean onMenuItemSelected(int featureId, MenuItem item) {\\nint itemId \\u003d item.getItemId(); \\nswitch (itemId) {\\ncase android.R.id.home:\\n%s\\nbreak;\\n}\\nreturn true;\\n}\",\"headerSpec\":\"when home button of action bar clicked\",\"var\":\"ActionBar\",\"icon\":\"2131165565\",\"name\":\"when clicked\",\"listener\":\"ActionBar\",\"description\":\"when clicked\",\"parameters\":\"\"},{\"code\":\"private javax.crypto.SecretKey generateKey(String pwd) throws Exception {\\n\\nfinal java.security.MessageDigest digest \\u003d java.security.MessageDigest.getInstance(\\\"SHA-256\\\");\\n\\nbyte b \\u003d pwd.getBytes(\\\"UTF-8\\\");\\n\\ndigest.update(b,0,b.length);\\n/*%s*/\\nbyte key \\u003d digest.digest();\\n\\njavax.crypto.spec.SecretKeySpec sec \\u003d new javax.crypto.spec.SecretKeySpec(key, \\\"AES\\\");\\n\\nreturn sec;\\n}\",\"headerSpec\":\"don\\u0027t put any thing here bro\",\"var\":\"Text Encryptor\",\"icon\":\"2131165595\",\"name\":\"Enable AES\",\"listener\":\"Text Encryptor\",\"description\":\"use this to Enable it\",\"parameters\":\"\"},{\"code\":\"private javax.crypto.SecretKey generateKey(String pwd) throws Exception {\\n\\nfinal java.security.MessageDigest digest \\u003d java.security.MessageDigest.getInstance(\\\"SHA-256\\\");\\n\\nbyte b \\u003d pwd.getBytes(\\\"UTF-8\\\");\\n\\ndigest.update(b,0,b.length);\\n/*%s*/\\nbyte key \\u003d digest.digest();\\n\\njavax.crypto.spec.SecretKeySpec sec \\u003d new javax.crypto.spec.SecretKeySpec(key, \\\"AES\\\");\\n\\nreturn sec;\\n}\",\"headerSpec\":\"don\\u0027t put any thing here bro\",\"var\":\"Text Encryptor\",\"icon\":\"2131165595\",\"name\":\"Enable AES\",\"listener\":\"Text Encryptor\",\"description\":\"use this to Enable it\",\"parameters\":\"\"},{\"code\":\"private javax.crypto.SecretKey generateKey(String pwd) throws Exception {\\n\\nfinal java.security.MessageDigest digest \\u003d java.security.MessageDigest.getInstance(\\\"SHA-256\\\");\\n\\nbyte b \\u003d pwd.getBytes(\\\"UTF-8\\\");\\n\\ndigest.update(b,0,b.length);\\n/*%s*/\\nbyte key \\u003d digest.digest();\\n\\njavax.crypto.spec.SecretKeySpec sec \\u003d new javax.crypto.spec.SecretKeySpec(key, \\\"AES\\\");\\n\\nreturn sec;\\n}\",\"headerSpec\":\"don\\u0027t put any thing here bro\",\"var\":\"Text Encryptor\",\"icon\":\"2131165595\",\"name\":\"Enable AES\",\"listener\":\"Text Encryptor\",\"description\":\"use this to Enable it\",\"parameters\":\"\"},{\"code\":\"private javax.crypto.SecretKey generateKey(String pwd) throws Exception {\\n\\nfinal java.security.MessageDigest digest \\u003d java.security.MessageDigest.getInstance(\\\"SHA-256\\\");\\n\\nbyte b \\u003d pwd.getBytes(\\\"UTF-8\\\");\\n\\ndigest.update(b,0,b.length);\\n/*%s*/\\nbyte key \\u003d digest.digest();\\n\\njavax.crypto.spec.SecretKeySpec sec \\u003d new javax.crypto.spec.SecretKeySpec(key, \\\"AES\\\");\\n\\nreturn sec;\\n}\",\"headerSpec\":\"don\\u0027t put any thing here bro\",\"var\":\"Text Encryptor\",\"icon\":\"2131165595\",\"name\":\"Enable AES\",\"listener\":\"Text Encryptor\",\"description\":\"use this to Enable it\",\"parameters\":\"\"},{\"code\":\"public void _ArabWareYouTube () {\\n/*%s*/\\n}\\nprivate\\nandroid.graphics.pdf.PdfRenderer\\nrenderer;\\nZoomableImageView touch;\\r\\npublic class ZoomableImageView extends ImageView {\\n\\n\\nMatrix matrix \\u003d new Matrix();\\n\\nstatic final int NONE \\u003d 0;\\n\\nstatic final int DRAG \\u003d 1;\\n\\nstatic final int ZOOM \\u003d 2;\\n\\nstatic final int CLICK \\u003d 3;\\n\\nint mode \\u003d NONE;\\n\\nPointF last \\u003d new PointF();\\n\\nPointF start \\u003d new PointF();\\n\\nfloat minScale \\u003d 1f;\\n\\nfloat maxScale \\u003d 4f;\\n\\nfloat m;\\n\\nfloat redundantXSpace, redundantYSpace;\\n\\nfloat width, height;\\n\\nfloat saveScale \\u003d 1f;\\n\\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\\n\\nScaleGestureDetector mScaleDetector;\\n\\nContext context;\\n\\n\\npublic ZoomableImageView(Context context) {\\n\\nsuper(context);\\n\\nsuper.setClickable(true);\\n\\nthis.context \\u003d context;\\n\\nmScaleDetector \\u003d new ScaleGestureDetector(context, new ScaleListener());\\n\\nmatrix.setTranslate(1f, 1f);\\n\\nm \\u003d new float9;\\n\\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\\n\\n\\nsetOnTouchListener(new OnTouchListener() {\\n\\n@Override\\n\\npublic boolean onTouch(View v, MotionEvent event) {\\n\\nmScaleDetector.onTouchEvent(event);\\n\\nmatrix.getValues(m);\\n\\nfloat x \\u003d mMatrix.MTRANS_X;\\n\\nfloat y \\u003d mMatrix.MTRANS_Y;\\n\\nPointF curr \\u003d new PointF(event.getX(), event.getY());\\n\\nswitch (event.getAction()) {\\n\\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \\u003d DRAG;\\n\\nbreak;\\n\\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\\n\\nmode \\u003d ZOOM;\\n\\nbreak;\\n\\ncase MotionEvent.ACTION_MOVE:\\n\\nif (mode \\u003d\\u003d ZOOM || (mode \\u003d\\u003d DRAG \\u0026\\u0026 saveScale \\u003e minScale)) {\\n\\nfloat deltaX \\u003d curr.x - last.x;\\n\\nfloat deltaY \\u003d curr.y - last.y;\\n\\nfloat scaleWidth \\u003d Math.round(origWidth * saveScale);\\n\\nfloat scaleHeight \\u003d Math.round(origHeight * saveScale);\\n\\nif (scaleWidth \\u003c width) {\\n\\ndeltaX \\u003d 0;\\n\\nif (y + deltaY \\u003e 0) deltaY \\u003d -y;\\n\\nelse if (y + deltaY \\u003c -bottom) deltaY \\u003d -(y + bottom);\\n\\n} else if (scaleHeight \\u003c height) {\\n\\ndeltaY \\u003d 0;\\n\\nif (x + deltaX \\u003e 0) deltaX \\u003d -x;\\n\\nelse if (x + deltaX \\u003c -right) deltaX \\u003d -(x + right);\\n\\n} else {\\n\\nif (x + deltaX \\u003e 0) deltaX \\u003d -x;\\n\\nelse if (x + deltaX \\u003c -right) deltaX \\u003d -(x + right);\\n\\nif (y + deltaY \\u003e 0) deltaY \\u003d -y;\\n\\nelse if (y + deltaY \\u003c -bottom) deltaY \\u003d -(y + bottom);\\n\\n}\\n\\nmatrix.postTranslate(deltaX, deltaY);\\n\\nlast.set(curr.x, curr.y);\\n\\n}\\n\\nbreak;\\n\\ncase MotionEvent.ACTION_UP:\\n\\nmode \\u003d NONE;\\n\\nint xDiff \\u003d (int) Math.abs(curr.x - start.x);\\n\\nint yDiff \\u003d (int) Math.abs(curr.y - start.y);\\n\\nif (xDiff \\u003c CLICK \\u0026\\u0026 yDiff \\u003c CLICK) performClick();\\n\\nbreak;\\n\\ncase MotionEvent.ACTION_POINTER_UP:\\n\\nmode \\u003d NONE;\\n\\nbreak;\\n\\n}\\n\\nsetImageMatrix(matrix);\\n\\ninvalidate();\\n\\nreturn true;\\n\\n}\\n\\n});\\n\\n}\\n\\n\\n@Override\\n\\npublic void setImageBitmap(Bitmap bm) {\\n\\nsuper.setImageBitmap(bm);\\n\\nbmWidth \\u003d bm.getWidth();\\n\\nbmHeight \\u003d bm.getHeight(); }\\n\\n\\npublic void setMaxZoom(float x) {\\n\\nmaxScale \\u003d x; }\\n\\n\\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\\n\\n@Override\\n\\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\\n\\nmode \\u003d ZOOM;\\n\\nreturn true;}\\n\\n@Override\\n\\npublic boolean onScale(ScaleGestureDetector detector) {\\n\\nfloat mScaleFactor \\u003d detector.getScaleFactor();\\n\\nfloat origScale \\u003d saveScale;\\n\\nsaveScale *\\u003d mScaleFactor;\\n\\nif (saveScale \\u003e maxScale){\\n\\nsaveScale \\u003d maxScale;\\n\\nmScaleFactor \\u003d maxScale / origScale;\\n\\n} else if (saveScale \\u003c minScale) {\\n\\nsaveScale \\u003d minScale;\\n\\nmScaleFactor \\u003d minScale / origScale;}\\n\\nright \\u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\\n\\nbottom \\u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\\n\\nif (origWidth * saveScale \\u003c\\u003d width || origHeight * saveScale \\u003c\\u003d height) {\\n\\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\\n\\nif (mScaleFactor \\u003c 1) {\\n\\nmatrix.getValues(m);\\n\\nfloat x \\u003d mMatrix.MTRANS_X;\\n\\nfloat y \\u003d mMatrix.MTRANS_Y;\\n\\nif (mScaleFactor \\u003c 1) {\\n\\nif (Math.round(origWidth * saveScale) \\u003c width) {\\n\\nif (y \\u003c -bottom) matrix.postTranslate(0, -(y + bottom));\\n\\nelse if (y \\u003e 0) matrix.postTranslate(0, -y);\\n\\n} else {\\n\\nif (x \\u003c -right) matrix.postTranslate(-(x + right), 0);\\n\\nelse if (x \\u003e 0) matrix.postTranslate(-x, 0);}\\n\\n}\\n\\n}\\n\\n} else {\\n\\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\\n\\nfloat x \\u003d mMatrix.MTRANS_X;\\n\\nfloat y \\u003d mMatrix.MTRANS_Y;\\n\\nif (mScaleFactor \\u003c 1) {\\n\\nif (x \\u003c -right) matrix.postTranslate(-(x + right), 0);\\n\\nelse if (x \\u003e 0) matrix.postTranslate(-x, 0);\\n\\nif (y \\u003c -bottom) matrix.postTranslate(0, -(y + bottom));\\n\\nelse if (y \\u003e 0) matrix.postTranslate(0, -y);}\\n\\n}\\n\\nreturn true;\\n\\n}\\n\\n}\\n\\n\\n@Override\\n\\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\\n\\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\\n\\nwidth \\u003d MeasureSpec.getSize(widthMeasureSpec);\\n\\nheight \\u003d MeasureSpec.getSize(heightMeasureSpec);\\n\\nfloat scale;\\n\\nfloat scaleX \\u003d width / bmWidth;\\n\\nfloat scaleY \\u003d height / bmHeight;\\n\\nscale \\u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\\n\\nsaveScale \\u003d 1f;\\n\\nredundantYSpace \\u003d height - (scale * bmHeight) ;\\n\\nredundantXSpace \\u003d width - (scale * bmWidth);\\n\\nredundantYSpace /\\u003d 2;\\n\\nredundantXSpace /\\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\\n\\norigWidth \\u003d width - 2 * redundantXSpace;\\n\\norigHeight \\u003d height - 2 * redundantYSpace;\\n\\nright \\u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\\n\\nbottom \\u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\\n\\n}\\n\\n    \\r\\n{\\n}\",\"headerSpec\":\"don\\u0027t put any thing here\",\"var\":\"PdfReader\",\"icon\":\"2131165505\",\"name\":\"enable it\",\"listener\":\"PdfReader\",\"description\":\"enable it\",\"parameters\":\"\"},{\"code\":\"public void _ArabWareShareStart () {\\r\\n/*%s*/\\n\\t\\tString apk \\u003d getApplicationContext().getPackageName().concat(\\\".apk\\\");\\n\\t\\tString uri \\u003d (getApplicationContext().getPackageName());\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\t\\tandroid.content.pm.PackageInfo pi \\u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tapk \\u003d pi.applicationInfo.publicSourceDir;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\tshowMessage(e.toString());\\n\\t\\t}\\n\\t\\tIntent iten \\u003d new Intent(Intent.ACTION_SEND);\\n\\t\\titen.setType(\\\"*/*\\\");\\n\\t\\titen.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\\n\\t\\t\\n\\t\\tstartActivity(Intent.createChooser(iten, \\\"\\\"));\\r\\n\\t}\",\"headerSpec\":\"don\\u0027t put any thing here\",\"var\":\"ShareApp\",\"icon\":\"2131165554\",\"name\":\"EnableShare\",\"listener\":\"ShareApp\",\"description\":\"for enable it\",\"parameters\":\"\"},{\"code\":\"public void ComponentsMaker () {\\r\\n\\t\\t\\n\\t\\t/*\\n%s\\n*/\\r\\n\\t}\\r\",\"headerSpec\":\"Create Comments here\",\"var\":\"Comments Maker\",\"icon\":\"2131166159\",\"name\":\"Create Comments\",\"listener\":\"Comments Maker\",\"description\":\"\",\"parameters\":\"\"}"}]