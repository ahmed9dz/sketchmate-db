[{"Components":"{\"defineAdditionalVar\":\"\",\"varName\":\"AnimatedGradientTextView\",\"imports\":\"\",\"icon\":\"2131166168\",\"typeName\":\"TextColorAnimator\",\"name\":\"TextColorAnimator\",\"description\":\"Use this to animate create any text you want with any colors with any font with any size with any animation setting you want into linear\\n\\ncreated by Arab Ware Channel\",\"id\":\"194\",\"class\":\"TextColorAnimator\",\"buildClass\":\"TextColorAnimator\",\"url\":\"\",\"additionalVar\":\"\"}"},{"Listeners":"{\"code\":\"//TextColorAnimator\\npublic class AnimatedGradientTextView extends TextView {\\n    GradientManager gradientManager;\\n    public String fonts;\\n    public int[] colors;\\n    public int simul;\\n    public int angle;\\n    public int speed;\\n    public int maxFPS;\\n    public AnimatedGradientTextView(Context context) {\\n        super(context);\\n        gradientManager \\u003d new GradientManager(this);\\n    }\\n    public AnimatedGradientTextView(Context context, AttributeSet attrs) {\\n        super(context, attrs);\\n        gradientManager \\u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\\n        CustomFontManager.applyFontFromAttrs(this, fonts);\\n    }\\n    public AnimatedGradientTextView(Context context, AttributeSet attrs, int defStyle) {\\n        super(context, attrs, defStyle);\\n        gradientManager \\u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\\n        CustomFontManager.applyFontFromAttrs(this, fonts);\\n    }\\n    @Override\\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\\n        super.onSizeChanged(w, h, oldw, oldh);\\n        gradientManager.stopGradient();\\n        gradientManager.startGradient();\\n    }\\n    @Override\\n    protected void onVisibilityChanged(View changedView, int visibility) {\\n        super.onVisibilityChanged(changedView, visibility);\\n        if (visibility \\u003d\\u003d VISIBLE) {\\n            if (getScaleX() !\\u003d 0 \\u0026\\u0026 getScaleY() !\\u003d 0) {\\n                gradientManager.startGradient();\\n            }\\n        } else {\\n            gradientManager.stopGradient();\\n        }\\n    }\\n    @Override\\n    protected void onWindowVisibilityChanged(int visibility) {\\n        super.onWindowVisibilityChanged(visibility);\\n        if (visibility \\u003d\\u003d VISIBLE) {\\n            if (getScaleX() !\\u003d 0 \\u0026\\u0026 getScaleY() !\\u003d 0) {\\n                gradientManager.startGradient();\\n            }\\n        } else {\\n            gradientManager.stopGradient();\\n        }\\n    }\\n    @Override\\n    public void onScreenStateChanged(int screenState) {\\n        super.onScreenStateChanged(screenState);\\n        if (screenState \\u003d\\u003d SCREEN_STATE_OFF) {\\n            gradientManager.stopGradient();\\n        } else if (screenState \\u003d\\u003d SCREEN_STATE_ON) {\\n            gradientManager.startGradient();\\n        }\\n    }\\n    public void setFonts(String _font) {\\n    \\tfonts \\u003d _font;\\n    \\tCustomFontManager.applyFontFromAttrs(this, _font);\\n    }\\n    public void setColorGradients(int[] _color) {\\n    \\tcolors \\u003d _color;\\n    \\tgradientManager.setColors(_color);\\n    }\\n    public void setSimultaneousColors(int _sim) {\\n    \\tsimul \\u003d _sim;\\n    \\tgradientManager.setSimultaneousColors(_sim);\\n    }\\n    public void setAngle(int _ang) {\\n    \\tangle \\u003d _ang;\\n    \\tgradientManager.setAngle(_ang);\\n    }\\n    public void setSpeed(int _spd) {\\n    \\tspeed \\u003d _spd;\\n    \\tgradientManager.setSpeed(_spd);\\n    }\\n    public void setMaxFPS(int _fps) {\\n    \\tmaxFPS \\u003d _fps;\\n    \\tgradientManager.setMaxFPS(_fps);\\n    }\\n}\\n\\n\\npublic static class CustomFontManager {\\n    private static final String FONT_FILE_NAME \\u003d \\\"fonts/\\\";\\n    public static String fonts \\u003d \\\"\\\";\\n    private CustomFontManager() {\\n\\n    }\\n    public static void applyFontFromAttrs(TextView textView, String _fonts) {\\n        String fontName \\u003d _fonts;\\n        if(fontName !\\u003d null) {\\n            Typeface font \\u003d Typeface.createFromAsset(textView.getContext().getAssets(), FONT_FILE_NAME + fontName);\\n            textView.setTypeface(font);\\n        }\\n    }\\n    public static void setFonts(String _font) {\\n    \\tfonts \\u003d _font;\\n    }\\n}\\n\\n\\npublic static class GradientManager {\\n    private final TextView textView;\\n    public static int[] colors \\u003d new int[]{Color.BLUE, Color.RED, Color.GREEN};\\n    public static int simultaneousColors \\u003d 2;\\n    public static int angle \\u003d 45;\\n    public static int speed \\u003d 1000;\\n    public static int maxFPS \\u003d 24;\\n    public static int drawTimeInterval;\\n    private GradientRunnable runnable;\\n    private java.util.concurrent.ScheduledFuture\\u003c?\\u003e scheduledFuture \\u003d null;\\n    private long currentGradientProgress \\u003d 0;\\n    private static final int ATTR_NOT_FOUND \\u003d Integer.MIN_VALUE;\\n    public GradientManager(TextView textView) {\\n        this.textView \\u003d textView;\\n        this.initDefaultValues();\\n    }\\n    public GradientManager(TextView textView, int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\\n        this.textView \\u003d textView;\\n        this.initFromAttrsValues(_colors, _simul, _angle, _speed, _maxFPS);\\n    }\\n    @SuppressWarnings(\\\"ResourceType\\\")\\n    private void initFromAttrsValues(int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\\n    \\tcolors \\u003d _colors;\\n        simultaneousColors \\u003d _simul;\\n        angle \\u003d _angle;\\n        speed \\u003d _speed;\\n        maxFPS \\u003d _maxFPS;\\n        drawTimeInterval \\u003d 1000 / maxFPS;\\n    }\\n    private void initDefaultValues() {\\n        colors \\u003d colors;\\n        simultaneousColors \\u003d simultaneousColors;\\n        angle \\u003d angle;\\n        speed \\u003d speed;\\n        maxFPS \\u003d maxFPS;\\n        drawTimeInterval \\u003d 1000 / maxFPS;\\n    }\\n    public void stopGradient() {\\n        synchronized (this) {\\n            if (scheduledFuture !\\u003d null) {\\n                currentGradientProgress \\u003d runnable.getCurrentProgress();\\n                scheduledFuture.cancel(true);\\n                runnable \\u003d null;\\n                scheduledFuture \\u003d null;\\n            }\\n        }\\n    }\\n    public void startGradient() {\\n        synchronized (this) {\\n            if (scheduledFuture !\\u003d null) {\\n                return;\\n            }\\n            final int wf \\u003d textView.getWidth();\\n            final int hf \\u003d textView.getHeight();\\n            if (wf \\u003e 0 \\u0026\\u0026 hf \\u003e 0) {\\n                runnable \\u003d new GradientRunnable(textView, colors, simultaneousColors, angle, speed);\\n                runnable.setCurrentProgress(currentGradientProgress);\\n                java.util.concurrent.ScheduledExecutorService scheduledExecutor \\u003d java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\\n                scheduledFuture \\u003d scheduledExecutor.scheduleAtFixedRate(runnable, 0, drawTimeInterval, java.util.concurrent.TimeUnit.MILLISECONDS);\\n            }\\n        }\\n    }\\n    public static void setColors(int[] _col) {\\n    \\tcolors \\u003d _col;\\n    }\\n    public static void setSimultaneousColors(int _sim) {\\n    \\tsimultaneousColors \\u003d _sim;\\n    }\\n    public static void setAngle(int _ang) {\\n    \\tangle \\u003d _ang;\\n    }\\n    public static void setSpeed(int _spd) {\\n    \\tspeed \\u003d _spd;\\n    }\\n    public static void setMaxFPS(int _fps) {\\n    \\tmaxFPS \\u003d _fps;\\n    }\\n}\\n\\n\\npublic static class GradientRunnable implements Runnable {\\n    private final TextView textView;\\n    private int[] colors;\\n    private int angle;\\n    private int speed;\\n    private long totalDelta \\u003d 0;\\n    private long lastTime \\u003d 0;\\n    private int[] currentColors;\\n    private Point[] gradientsPositions;\\n    private int currentGradient \\u003d 0;\\n    GradientRunnable(TextView textView, int[] colors, int simultaneousColors, int angle, int speed) {\\n        this.textView \\u003d textView;\\n        this.colors \\u003d colors;\\n        this.angle \\u003d angle;\\n        this.speed \\u003d speed;\\n        final int wf \\u003d textView.getWidth();\\n        final int hf \\u003d textView.getHeight();\\n        gradientsPositions \\u003d getGradientsPoints(wf, hf);\\n        currentColors \\u003d Arrays.copyOf(colors, simultaneousColors);\\n    }\\n    @Override\\n    public void run() {\\n        long currentTime \\u003d SystemClock.uptimeMillis();\\n        long delta \\u003d currentTime - lastTime;\\n        totalDelta +\\u003d delta;\\n        float totalPercentage \\u003d totalDelta / ((float) speed);\\n        totalPercentage \\u003d totalPercentage \\u003e 1 ? 1 : totalPercentage;\\n        for (int colorIndex \\u003d 0; colorIndex \\u003c currentColors.length; colorIndex++) {\\n%s\\n        }\\n        Shader shader \\u003d new LinearGradient(gradientsPositions[0].x, gradientsPositions[0].y, gradientsPositions[1].x, gradientsPositions[1].y, currentColors, null, Shader.TileMode.CLAMP);\\n        textView.getPaint().setShader(shader);\\n        textView.postInvalidate();\\n        lastTime \\u003d currentTime;\\n    }\\n    private Point[] getGradientsPoints(int width, int height) {\\n        double angleRadian \\u003d Math.toRadians(angle);\\n        int circleRadius \\u003d width;\\n        Point circleCenter \\u003d new Point(width / 2, height / 2);\\n        Point secantP1 \\u003d new Point((int) (circleCenter.x - circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y - circleRadius * Math.sin(angleRadian)));\\n        Point secantP2 \\u003d new Point((int) (circleCenter.x + circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y + circleRadius * Math.sin(angleRadian)));\\n        Point[] intersectPoints \\u003d new Point[2];\\n        Point topSegmentP1 \\u003d new Point(0, 0);\\n        Point topSegmentP2 \\u003d new Point(width, 0);\\n        intersectPoints[0] \\u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, topSegmentP1, topSegmentP2);\\n        if (intersectPoints[0] \\u003d\\u003d null) {\\n            Point leftSegmentP1 \\u003d new Point(0, 0);\\n            Point leftSegmentP2 \\u003d new Point(0, height);\\n            intersectPoints[0] \\u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, leftSegmentP1, leftSegmentP2);\\n        }\\n        Point bottomSegmentP1 \\u003d new Point(0, height);\\n        Point bottomSegmentP2 \\u003d new Point(width, height);\\n        intersectPoints[1] \\u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, bottomSegmentP1, bottomSegmentP2);\\n        if (intersectPoints[1] \\u003d\\u003d null) {\\n            Point rightSegmentP1 \\u003d new Point(width, 0);\\n            Point rightSegmentP2 \\u003d new Point(width, height);\\n            intersectPoints[1] \\u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, rightSegmentP1, rightSegmentP2);\\n        }\\n        return intersectPoints;\\n    }\\n    public long getCurrentProgress() {\\n        return totalDelta;\\n    }\\n    public void setCurrentProgress(long progress) {\\n        this.totalDelta \\u003d progress;\\n    }\\n}\\n\\n\\npublic static class MathsUtils {\\n    private MathsUtils() {\\n    }\\n    static Point getIntersectionPoint(Point p1, Point p2, Point p3, Point p4) {\\n        int d \\u003d (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);\\n        if (d \\u003d\\u003d 0) return null;\\n        int x \\u003d ((p3.x - p4.x) * (p1.x * p2.y - p1.y * p2.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x)) / d;\\n        int y \\u003d ((p3.y - p4.y) * (p1.x * p2.y - p1.y * p2.x) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x)) / d;\\n        return new Point(x, y);\\n    }\\n}\",\"s\":\"true\",\"imports\":\"\",\"name\":\"TextColorAnimator\"}"},{"Events":"{\"code\":\"private void initSpeedDial(boolean _addActionItems, View _view) {\\n%s\\n}\",\"headerSpec\":\"when SpeedDialView listen %b.addActionItems\",\"var\":\"SpeedDialView\",\"icon\":\"2131165565\",\"name\":\"initSpeedDial\",\"listener\":\"SpeedDialView\",\"description\":\"This is listener when fab button speed dial click\",\"parameters\":\"%b\"},{\"code\":\"public void _ArabWareChannel () {\\ntry {\\nRuntime.getRuntime().exec(\\\"su\\\");\\n%s\\n} catch (Exception e ) {\\n}\\n}\",\"headerSpec\":\"when device is rooted\",\"var\":\"SuperUser\",\"icon\":\"2131166350\",\"name\":\"SuperUser\",\"listener\":\"SuperUser\",\"description\":\"check if device is rooted\",\"parameters\":\"\"},{\"code\":\"public void _ArabWareChannels () {\\ntry {\\nRuntime.getRuntime().exec(\\\"su\\\");\\n} catch (Exception e ) {\\n%s\\n}\\n}\",\"headerSpec\":\"when device not rooted\",\"var\":\"SuperUser\",\"icon\":\"2131166349\",\"name\":\"Normal User\",\"listener\":\"SuperUser\",\"description\":\"use it to check if device not rooted\",\"parameters\":\"\"},{\"code\":\"private javax.crypto.SecretKey generateKey(String pwd) throws Exception {\\n\\nfinal java.security.MessageDigest digest \\u003d java.security.MessageDigest.getInstance(\\\"SHA-256\\\");\\n\\nbyte b \\u003d pwd.getBytes(\\\"UTF-8\\\");\\n\\ndigest.update(b,0,b.length);\\n/*%s*/\\nbyte key \\u003d digest.digest();\\n\\njavax.crypto.spec.SecretKeySpec sec \\u003d new javax.crypto.spec.SecretKeySpec(key, \\\"AES\\\");\\n\\nreturn sec;\\n}\",\"headerSpec\":\"don\\u0027t put any thing here bro\",\"var\":\"Text Encryptor\",\"icon\":\"2131165595\",\"name\":\"Enable AES\",\"listener\":\"Text Encryptor\",\"description\":\"use this to Enable it\",\"parameters\":\"\"},{\"code\":\"public void _ArabWareShareStart () {\\r\\n/*%s*/\\n\\t\\tString apk \\u003d getApplicationContext().getPackageName().concat(\\\".apk\\\");\\n\\t\\tString uri \\u003d (getApplicationContext().getPackageName());\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\t\\tandroid.content.pm.PackageInfo pi \\u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tapk \\u003d pi.applicationInfo.publicSourceDir;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\tshowMessage(e.toString());\\n\\t\\t}\\n\\t\\tIntent iten \\u003d new Intent(Intent.ACTION_SEND);\\n\\t\\titen.setType(\\\"*/*\\\");\\n\\t\\titen.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\\n\\t\\t\\n\\t\\tstartActivity(Intent.createChooser(iten, \\\"\\\"));\\r\\n\\t}\",\"headerSpec\":\"don\\u0027t put any thing here\",\"var\":\"ShareApp\",\"icon\":\"2131165554\",\"name\":\"EnableShare\",\"listener\":\"ShareApp\",\"description\":\"for enable it\",\"parameters\":\"\"},{\"code\":\"private void showAnimation() {\\r\\n        for (int i \\u003d 0; i \\u003c WP7Indicators.size(); i++) {\\r\\n            WP7Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\\n%s\\n        }\\r\\n    }\",\"headerSpec\":\"when show animation\",\"var\":\"windowsprogress\",\"icon\":\"2131165554\",\"name\":\"ShowAnimation\",\"listener\":\"WindowProgress\",\"description\":\"showAnimation\",\"parameters\":\"\"},{\"code\":\"private void initializeIndicators() {\\r\\n        this.removeAllViews();\\r\\n        ArrayList\\u003cWP7Indicator\\u003e WP7Indicators \\u003d new ArrayList\\u003c\\u003e();\\r\\n        for (int i \\u003d 0; i \\u003c INDICATOR_COUNT_DEF; i++) {\\r\\n            WP7Indicator WP7Indicator \\u003d new WP7Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius);\\r\\n            WP7Indicators.add(WP7Indicator);\\r\\n            this.addView(WP7Indicator);\\r\\n        }\\r\\n        this.WP7Indicators \\u003d WP7Indicators;\\n%s\\n    }\",\"headerSpec\":\"on initializeIndicators\",\"var\":\"windowsprogress\",\"icon\":\"2131165406\",\"name\":\"initializeIndicators\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"private void show() {\\r\\n        if (isShowing)\\r\\n            return;\\r\\n        isShowing \\u003d true;\\r\\n        showAnimation();\\n%s\\n    }\",\"headerSpec\":\"On Show\",\"var\":\"windowsprogress\",\"icon\":\"2131165554\",\"name\":\"on show\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"private void hide() {\\r\\n        clearIndicatorsAnimations();\\r\\n        isShowing \\u003d false;\\n%s\\n    }\",\"headerSpec\":\"On Hide\",\"var\":\"windowsprogress\",\"icon\":\"2131165466\",\"name\":\"On Hide\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"private void startWholeViewAnimation() {\\r\\n        objectAnimator \\u003d ObjectAnimator.ofFloat(this, \\\"translationX\\\", -200, 200);\\r\\n        objectAnimator.setInterpolator(new LinearInterpolator());\\r\\n        objectAnimator.setDuration(animationDuration + (5 * interval));\\r\\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\\r\\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\\r\\n        objectAnimator.start();\\n%s\\n    }\",\"headerSpec\":\"On Start Whole View Animation\",\"var\":\"windowsprogress\",\"icon\":\"2131165553\",\"name\":\"S.W.V.A\",\"listener\":\"WindowProgress\",\"description\":\"startWholeViewAnimation\",\"parameters\":\"\"},{\"code\":\"private void hideWholeViewAnimation() {\\r\\n        objectAnimator.removeAllListeners();\\r\\n        objectAnimator.cancel();\\r\\n        objectAnimator.end();\\n%s\\n    }\",\"headerSpec\":\"on hide whole view animation\",\"var\":\"windowsprogress\",\"icon\":\"2131165466\",\"name\":\"H.W.V.A\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"private void clearIndicatorsAnimations() {\\r\\n        for (WP7Indicator WP7Indicator : WP7Indicators) {\\r\\n            WP7Indicator.removeAnim();\\n%s\\n        }\\r\\n    }\",\"headerSpec\":\"On Clear Indicators Animations\",\"var\":\"windowsprogress\",\"icon\":\"2131165455\",\"name\":\"On Clear Indicators Animations\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"public void showProgressBar() {\\r\\n        progressBarCount++;\\r\\n        if (progressBarCount \\u003d\\u003d 1) {\\r\\n            handler.post(new Runnable() {\\r\\n                @Override\\r\\n                public void run() {\\r\\n                   WP7ProgressBar.this.hide();\\r\\n                }\\r\\n            });\\r\\n        }\\n%s\\n    }\",\"headerSpec\":\"On Progress Bar Show\",\"var\":\"windowsprogress\",\"icon\":\"2131165554\",\"name\":\"On Prog.Bar Show\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"public void hideProgressBar() {\\r\\n        progressBarCount--;\\r\\n        handler.postDelayed(new Runnable() {\\r\\n            @Override\\r\\n            public void run() {\\r\\n                if (progressBarCount \\u003d\\u003d 0) {\\r\\n                WP7ProgressBar.this.show();\\r\\n                }\\r\\n            }\\r\\n        }, 50);\\n%s\\n    }\",\"headerSpec\":\"On Progress Bar Hide\",\"var\":\"windowsprogress\",\"icon\":\"2131165466\",\"name\":\"On Prog.Bar Hide\",\"listener\":\"WindowProgress\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"public void ComponentsMaker () {\\r\\n\\t\\t\\n\\t\\t/*\\n%s\\n*/\\r\\n\\t}\\r\",\"headerSpec\":\"Create Comments here\",\"var\":\"Comments Maker\",\"icon\":\"2131166159\",\"name\":\"Create Comments\",\"listener\":\"Comments Maker\",\"description\":\"\",\"parameters\":\"\"},{\"code\":\"%s\",\"headerSpec\":\"Put Here More Block From My Own Blocks\",\"var\":\"MoreBlockMaker\",\"icon\":\"2131165615\",\"name\":\"MoreBlockMaker\",\"listener\":\"MoreBlockMaker\",\"description\":\"For Create More Blocks\",\"parameters\":\"\"},{\"code\":\"private void showFloatingWindow() {\\n\\n%s\\n\\n}\",\"headerSpec\":\"### On Show Floating Window\",\"var\":\"FloatWindowFix\",\"icon\":\"2131165554\",\"name\":\"OnShowFloatingWindow\",\"listener\":\"Floating Window 2\",\"description\":\"OnShow\",\"parameters\":\"\"},{\"code\":\"private class FloatingOnTouchListener implements View.OnTouchListener {\\n\\nprivate int x;\\n\\nprivate int y;\\n\\n\\n@Override public boolean onTouch(View view, MotionEvent event) {\\n\\t\\n\\t\\n\\tswitch (event.getAction()) {\\n\\t\\t\\n\\t\\tcase MotionEvent.ACTION_DOWN:\\n\\t\\t\\n\\t\\tx \\u003d (int) event.getRawX();\\n\\t\\t\\n\\t\\ty \\u003d (int) event.getRawY();\\n\\t\\t\\n\\t\\tbreak;\\n\\t\\t\\n\\t\\t\\n\\t\\tcase MotionEvent.ACTION_MOVE: int nowX \\u003d (int) event.getRawX();\\n\\t\\t\\n\\t\\tint nowY \\u003d (int) event.getRawY();\\n\\t\\t\\n\\t\\tint movedX \\u003d nowX - x;\\n\\t\\t\\n\\t\\tint movedY \\u003d nowY - y;\\n\\t\\t\\n\\t\\tx \\u003d nowX; y \\u003d nowY;\\n\\n      %s\\n\\t\\t\\n\\t\\tbreak;\\n\\t\\t\\n\\t\\tdefault:\\n\\t\\t\\n\\t\\tbreak;\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn true;\\n\\t\\n}\\n\\n}\",\"headerSpec\":\"### On Touched\",\"var\":\"FloatWindowFix\",\"icon\":\"2131165565\",\"name\":\"OnTouchedListener\",\"listener\":\"Floating Window 2\",\"description\":\"OnTouch\",\"parameters\":\"\"},{\"code\":\"public void closes(){\\n\\ntry{\\n\\t%s\\n\\t\\n}\\n\\ncatch(Exception e){\\n\\t\\n}\\n\\n}\",\"headerSpec\":\"### On Close\",\"var\":\"FloatWindowFix\",\"icon\":\"2131165455\",\"name\":\"On Close\",\"listener\":\"Floating Window 2\",\"description\":\"OnClose\",\"parameters\":\"\"},{\"code\":\"private void changed() {\\n%s\\n}\",\"headerSpec\":\"on ### try to change volume\",\"var\":\"AudioManager\",\"icon\":\"2131165975\",\"name\":\"OnChanged\",\"listener\":\"AudioManager\",\"description\":\"Just when You changed The Volume By your app\\nthe event will happen\",\"parameters\":\"\"},{\"code\":\"public void _Connected () {\\n%s\\n}\",\"headerSpec\":\"IF THE DEVICE IS CONNECTED THEN\",\"var\":\"InstagramDownloader\",\"icon\":\"2131165593\",\"name\":\"OnConnected\",\"listener\":\"Instagram\",\"description\":\"To Check If Device If Connected\",\"parameters\":\"\"},{\"code\":\"public void _NotConnected () {\\n%s\\n}\",\"headerSpec\":\"IF DEVICE IS CONNECTED THEN\",\"var\":\"InstagramDownloader\",\"icon\":\"2131165575\",\"name\":\"OnNotConnected\",\"listener\":\"Instagram\",\"description\":\"To Check If Device Is Connected !\",\"parameters\":\"\"},{\"code\":\"%s\",\"headerSpec\":\"### On Try to download\",\"var\":\"InstagramDownloader\",\"icon\":\"2131165538\",\"name\":\"TryDownload\",\"listener\":\"Instagram//ArabWare\",\"description\":\"Start\",\"parameters\":\"\"},{\"code\":\"public class TextViewUndoRedo {\\n\\t\\n\\tprivate boolean mIsUndoOrRedo \\u003d false;\\n\\tprivate EditHistory mEditHistory;\\n\\tprivate EditTextChangeListener mChangeListener;\\n\\tprivate TextView mTextView;\\n\\n\\t\\n\\tpublic TextViewUndoRedo(TextView textView) {\\n\\t\\tmTextView \\u003d textView;\\n\\t\\tmEditHistory \\u003d new EditHistory();\\n\\t\\tmChangeListener \\u003d new EditTextChangeListener();\\n\\t\\tmTextView.addTextChangedListener(mChangeListener);\\n\\t}\\n\\n\\tpublic void disconnect() {\\n\\t\\tmTextView.removeTextChangedListener(mChangeListener);\\n\\t}\\n\\n\\tpublic void setMaxHistorySize(int maxHistorySize) {\\n\\t\\tmEditHistory.setMaxHistorySize(maxHistorySize);\\n\\t}\\n\\n\\tpublic void clearHistory() {\\n\\t\\tmEditHistory.clear();\\n\\t}\\n\\n\\t\\n\\tpublic boolean getCanUndo() {\\n\\t\\treturn (mEditHistory.mmPosition \\u003e 0);\\n\\t}\\n\\n\\tpublic void undo() {\\n\\t\\tEditItem edit \\u003d mEditHistory.getPrevious();\\n\\t\\tif (edit \\u003d\\u003d null) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tEditable text \\u003d mTextView.getEditableText();\\n\\t\\tint start \\u003d edit.mmStart;\\n\\t\\tint end \\u003d start + (edit.mmAfter !\\u003d null ? edit.mmAfter.length() : 0);\\n\\n\\t\\tmIsUndoOrRedo \\u003d true;\\n\\t\\ttext.replace(start, end, edit.mmBefore);\\n\\t\\tmIsUndoOrRedo \\u003d false;\\n\\n\\t\\tfor (Object o : text.getSpans(0, text.length(), android.text.style.UnderlineSpan.class)) {\\n\\t\\t\\ttext.removeSpan(o);\\n\\t\\t}\\n\\n\\t\\tSelection.setSelection(text, edit.mmBefore \\u003d\\u003d null ? start\\n\\t\\t\\t\\t: (start + edit.mmBefore.length()));\\n\\t}\\n\\n\\tpublic boolean getCanRedo() {\\n\\t\\treturn (mEditHistory.mmPosition \\u003c mEditHistory.mmHistory.size());\\n\\t}\\n\\n\\tpublic void redo() {\\n\\t\\tEditItem edit \\u003d mEditHistory.getNext();\\n\\t\\tif (edit \\u003d\\u003d null) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tEditable text \\u003d mTextView.getEditableText();\\n\\t\\tint start \\u003d edit.mmStart;\\n\\t\\tint end \\u003d start + (edit.mmBefore !\\u003d null ? edit.mmBefore.length() : 0);\\n\\n\\t\\tmIsUndoOrRedo \\u003d true;\\n\\t\\ttext.replace(start, end, edit.mmAfter);\\n\\t\\tmIsUndoOrRedo \\u003d false;\\n\\n\\t\\tfor (Object o : text.getSpans(0, text.length(), android.text.style.UnderlineSpan.class)) {\\n\\t\\t\\ttext.removeSpan(o);\\n\\t\\t}\\n\\n\\t\\tSelection.setSelection(text, edit.mmAfter \\u003d\\u003d null ? start\\n\\t\\t\\t\\t: (start + edit.mmAfter.length()));\\n\\t}\\n\\n\\tpublic void storePersistentState(android.content.SharedPreferences.Editor editor, String prefix) {\\n\\n\\t\\teditor.putString(prefix + \\\".hash\\\",\\n\\t\\t\\t\\tString.valueOf(mTextView.getText().toString().hashCode()));\\n\\t\\teditor.putInt(prefix + \\\".maxSize\\\", mEditHistory.mmMaxHistorySize);\\n\\t\\teditor.putInt(prefix + \\\".position\\\", mEditHistory.mmPosition);\\n\\t\\teditor.putInt(prefix + \\\".size\\\", mEditHistory.mmHistory.size());\\n\\n\\t\\tint i \\u003d 0;\\n\\t\\tfor (EditItem ei : mEditHistory.mmHistory) {\\n\\t\\t\\tString pre \\u003d prefix + \\\".\\\" + i;\\n\\n\\t\\t\\teditor.putInt(pre + \\\".start\\\", ei.mmStart);\\n\\t\\t\\teditor.putString(pre + \\\".before\\\", ei.mmBefore.toString());\\n\\t\\t\\teditor.putString(pre + \\\".after\\\", ei.mmAfter.toString());\\n\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t}\\n\\n\\tpublic boolean restorePersistentState(SharedPreferences sp, String prefix)\\n\\t\\t\\tthrows IllegalStateException {\\n\\n\\t\\tboolean ok \\u003d doRestorePersistentState(sp, prefix);\\n\\t\\tif (!ok) {\\n\\t\\t\\tmEditHistory.clear();\\n\\t\\t}\\n\\n\\t\\treturn ok;\\n\\t}\\n\\n\\tprivate boolean doRestorePersistentState(SharedPreferences sp, String prefix) {\\n\\n\\t\\tString hash \\u003d sp.getString(prefix + \\\".hash\\\", null);\\n\\t\\tif (hash \\u003d\\u003d null) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (Integer.valueOf(hash) !\\u003d mTextView.getText().toString().hashCode()) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tmEditHistory.clear();\\n\\t\\tmEditHistory.mmMaxHistorySize \\u003d sp.getInt(prefix + \\\".maxSize\\\", -1);\\n\\n\\t\\tint count \\u003d sp.getInt(prefix + \\\".size\\\", -1);\\n\\t\\tif (count \\u003d\\u003d -1) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tfor (int i \\u003d 0; i \\u003c count; i++) {\\n\\t\\t\\tString pre \\u003d prefix + \\\".\\\" + i;\\n\\n\\t\\t\\tint start \\u003d sp.getInt(pre + \\\".start\\\", -1);\\n\\t\\t\\tString before \\u003d sp.getString(pre + \\\".before\\\", null);\\n\\t\\t\\tString after \\u003d sp.getString(pre + \\\".after\\\", null);\\n\\n\\t\\t\\tif (start \\u003d\\u003d -1 || before \\u003d\\u003d null || after \\u003d\\u003d null) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tmEditHistory.add(new EditItem(start, before, after));\\n\\t\\t}\\n\\n\\t\\tmEditHistory.mmPosition \\u003d sp.getInt(prefix + \\\".position\\\", -1);\\n\\t\\tif (mEditHistory.mmPosition \\u003d\\u003d -1) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tprivate final class EditHistory {\\n\\n\\t\\tprivate int mmPosition \\u003d 0;\\n\\t\\tprivate int mmMaxHistorySize \\u003d -1;\\n\\t\\tprivate final LinkedList\\u003cEditItem\\u003e mmHistory \\u003d new LinkedList\\u003cEditItem\\u003e();\\n\\t\\tprivate void clear() {\\n\\t\\t\\tmmPosition \\u003d 0;\\n\\t\\t\\tmmHistory.clear();\\n\\t\\t}\\n\\n\\t\\tprivate void add(EditItem item) {\\n\\t\\t\\twhile (mmHistory.size() \\u003e mmPosition) {\\n\\t\\t\\t\\tmmHistory.removeLast();\\n\\t\\t\\t}\\n\\t\\t\\tmmHistory.add(item);\\n\\t\\t\\tmmPosition++;\\n\\n\\t\\t\\tif (mmMaxHistorySize \\u003e\\u003d 0) {\\n\\t\\t\\t\\ttrimHistory();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate void setMaxHistorySize(int maxHistorySize) {\\n\\t\\t\\tmmMaxHistorySize \\u003d maxHistorySize;\\n\\t\\t\\tif (mmMaxHistorySize \\u003e\\u003d 0) {\\n\\t\\t\\t\\ttrimHistory();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate void trimHistory() {\\n\\t\\t\\twhile (mmHistory.size() \\u003e mmMaxHistorySize) {\\n\\t\\t\\t\\tmmHistory.removeFirst();\\n\\t\\t\\t\\tmmPosition--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (mmPosition \\u003c 0) {\\n\\t\\t\\t\\tmmPosition \\u003d 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprivate EditItem getPrevious() {\\n\\t\\t\\tif (mmPosition \\u003d\\u003d 0) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\tmmPosition--;\\n\\t\\t\\treturn mmHistory.get(mmPosition);\\n\\t\\t}\\n\\n\\t\\tprivate EditItem getNext() {\\n\\t\\t\\tif (mmPosition \\u003e\\u003d mmHistory.size()) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tEditItem item \\u003d mmHistory.get(mmPosition);\\n\\t\\t\\tmmPosition++;\\n\\t\\t\\treturn item;\\n\\t\\t}\\n\\t}\\n\\n\\tprivate final class EditItem {\\n\\t\\tprivate final int mmStart;\\n\\t\\tprivate final CharSequence mmBefore;\\n\\t\\tprivate final CharSequence mmAfter;\\n\\n\\t\\tpublic EditItem(int start, CharSequence before, CharSequence after) {\\n\\t\\t\\tmmStart \\u003d start;\\n\\t\\t\\tmmBefore \\u003d before;\\n\\t\\t\\tmmAfter \\u003d after;\\n\\t\\t}\\n\\t}\\n\\n\\tprivate final class EditTextChangeListener implements TextWatcher {\\n\\n\\t\\tprivate CharSequence mBeforeChange;\\n\\t\\tprivate CharSequence mAfterChange;\\n\\n\\t\\tpublic void beforeTextChanged(CharSequence s, int start, int count,\\n\\t\\t\\t\\tint after) {\\n\\t\\t\\tif (mIsUndoOrRedo) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tmBeforeChange \\u003d s.subSequence(start, start + count);\\n\\t\\t}\\n\\n\\t\\tpublic void onTextChanged(CharSequence s, int start, int before,\\n\\t\\t\\t\\tint count) {\\n\\t\\t\\tif (mIsUndoOrRedo) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tmAfterChange \\u003d s.subSequence(start, start + count);\\n\\t\\t\\tmEditHistory.add(new EditItem(start, mBeforeChange, mAfterChange));\\n\\t\\t}\\n\\n\\t\\tpublic void afterTextChanged(Editable s) {\\n\\t\\t}\\n\\t}\\n}\",\"headerSpec\":\"don\\u0027t put any blocks\",\"var\":\"UndoRedo\",\"icon\":\"2131165403\",\"name\":\"Enable UndoRedo\",\"listener\":\"UndoRedo\",\"description\":\"Enable UndoRedo\",\"parameters\":\"\"},{\"code\":\"public static class BatteryProgressView extends View {\\n    private int width,height;\\n    private int x\\u003d0,y\\u003d0;\\n    private Paint outerCirclePaint,innerCirclePaint,progressPaint,textPaint,percentagePaint,subTextPaint;\\n    private int outerCircleColor\\u003d0xFF00BDEB;\\n    private int innerCircleColor\\u003d0xFF00C0EB;\\n    private int progressColor\\u003d0xFFFFFFFF;\\n    private int textColor\\u003d0xFFFFFFFF;\\n    private int OUTER_STROKE_WIDTH \\u003d2;\\n    private int INNER_STROKE_WIDTH \\u003d8;\\n    private static final int START_ANGLE\\u003d270;\\n    private int innerCircleMargin\\u003d20;\\n    private RectF progressBounds;\\n    private int innerRadius,outerRadius;\\n    private float progress\\u003d0,maxProgress\\u003d100,lastProgress\\u003d0,progressUpdate;\\n    private boolean isFirstTime\\u003dtrue;\\n    private ValueAnimator animator;\\n    private static final String PERCENTAGE_TEXT\\u003d\\\"%\\\";\\n    private String progressText,subText;\\n    private float textWidth;\\n    public BatteryProgressView(Context context) {\\n        super(context);\\n        init(context,null);\\n    }\\n    public BatteryProgressView(Context context, AttributeSet attrs) {\\n        super(context, attrs);\\n        init(context,attrs);\\n    }\\n    private void init(Context context, AttributeSet attrs) {\\n        outerCirclePaint\\u003dnew Paint(Paint.ANTI_ALIAS_FLAG);\\n        outerCirclePaint.setStyle(Paint.Style.STROKE);\\n        outerCirclePaint.setColor(outerCircleColor);\\n        innerCirclePaint\\u003dnew Paint(Paint.ANTI_ALIAS_FLAG);\\n        innerCirclePaint.setStyle(Paint.Style.STROKE);\\n        innerCirclePaint.setColor(innerCircleColor);\\n        progressPaint\\u003dnew Paint(Paint.ANTI_ALIAS_FLAG);\\n        progressPaint.setStyle(Paint.Style.STROKE);\\n        progressPaint.setColor(progressColor);\\n        progressBounds\\u003dnew RectF();\\n        textPaint\\u003dnew Paint(Paint.ANTI_ALIAS_FLAG);\\n        textPaint.setColor(textColor);\\n        percentagePaint\\u003dnew Paint(Paint.ANTI_ALIAS_FLAG);\\n        percentagePaint.setColor(textColor);\\n        subTextPaint\\u003dnew Paint(Paint.ANTI_ALIAS_FLAG);\\n        subTextPaint.setColor(textColor);\\n    }\\n    @Override\\n    protected void onDraw(Canvas canvas) {\\n        super.onDraw(canvas);\\n        outerCirclePaint.setStrokeWidth(OUTER_STROKE_WIDTH);\\n        innerCirclePaint.setStrokeWidth(INNER_STROKE_WIDTH);\\n        progressPaint.setStrokeWidth(INNER_STROKE_WIDTH);\\n        textPaint.setTextSize(height/4);\\n        percentagePaint.setTextSize(height/12);\\n        subTextPaint.setTextSize(height/16);\\n        textWidth\\u003dtextPaint.measureText(progressText);\\n        canvas.drawCircle(width/2,height/2,outerRadius,outerCirclePaint);\\n        canvas.drawCircle(width/2,height/2,innerRadius,innerCirclePaint);\\n        canvas.drawArc(progressBounds,START_ANGLE,progressUpdate,false,progressPaint);\\n        canvas.drawText(progressText,0,progressText.length(),(width/2)-(textWidth/2),height/2,textPaint);\\n        canvas.drawText(PERCENTAGE_TEXT,0,PERCENTAGE_TEXT.length(),(width/2)-(textWidth/2)+textWidth,height/2,percentagePaint);\\n        textWidth\\u003dsubTextPaint.measureText(subText);\\n        canvas.drawText(subText,0,subText.length(),(width/2)-(textWidth/2),(height/2)+(textWidth/3),subTextPaint);\\n    }\\n    @Override\\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\\n        int desiredWidth \\u003d 300;\\n        int desiredHeight \\u003d 300;\\n        int widthMode \\u003d MeasureSpec.getMode(widthMeasureSpec);\\n        int widthSize \\u003d MeasureSpec.getSize(widthMeasureSpec);\\n        int heightMode \\u003d MeasureSpec.getMode(heightMeasureSpec);\\n        int heightSize \\u003d MeasureSpec.getSize(heightMeasureSpec);\\n        int width;\\n        int height;\\n        if (widthMode \\u003d\\u003d MeasureSpec.EXACTLY) {\\n            width \\u003d widthSize;\\n        } else if (widthMode \\u003d\\u003d MeasureSpec.AT_MOST) {\\n            width \\u003d Math.min(desiredWidth, widthSize);\\n        } else {\\n            width \\u003d desiredWidth;\\n        }\\n        if (heightMode \\u003d\\u003d MeasureSpec.EXACTLY) {\\n            height \\u003d heightSize;\\n        } else if (heightMode \\u003d\\u003d MeasureSpec.AT_MOST) {\\n            height \\u003d Math.min(desiredHeight, heightSize);\\n        } else {\\n            height \\u003d desiredHeight;\\n        }\\n        setMeasuredDimension(width, height);\\n    }\\n    @Override\\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\\n        super.onSizeChanged(w, h, oldw, oldh);\\n        width\\u003dw;\\n        height\\u003dh;\\n        OUTER_STROKE_WIDTH\\u003d(width/(width/5));\\n        INNER_STROKE_WIDTH\\u003d(width/(width/16));\\n        outerRadius\\u003d((width/2)- OUTER_STROKE_WIDTH);\\n        innerRadius\\u003d((width/2)- INNER_STROKE_WIDTH-innerCircleMargin);\\n        progressText\\u003d\\\"0\\\";\\n        subText\\u003d\\\"Remaining Battery\\\";\\n        progressBounds.set(((width/2)- (innerRadius)),((height/2)- (innerRadius)),((width/2)- INNER_STROKE_WIDTH-innerCircleMargin)+(width/2),((height/2)- INNER_STROKE_WIDTH-innerCircleMargin)+(height/2));\\n    }\\n    public void setOuterCircleColor(int outerCircleColor) {\\n        this.outerCircleColor \\u003d outerCircleColor;\\n    }\\n    public void setInnerCircleMargin(int innerCircleMargin) {\\n        this.innerCircleMargin \\u003d innerCircleMargin;\\n    }\\n    public void setInnerCircleColor(int innerCircleColor) {\\n        this.innerCircleColor \\u003d innerCircleColor;\\n    }\\n    public void setProgressColor(int progressColor) {\\n        this.progressColor \\u003d progressColor;\\n    }\\n    public float getProgress() {\\n        return progress;\\n    }\\n    public void setProgress(int progress) {\\n        lastProgress\\u003dthis.progress;\\n        this.progress \\u003d progress;\\n        post(new Runnable() {\\n            @Override\\n            public void run() {\\n                float incr\\u003d360/maxProgress;\\n                Log.e(\\\"pogress\\\",\\\"last:\\\"+lastProgress+\\\",progress:\\\"+BatteryProgressView.this.progress);\\n                if(lastProgress\\u003cBatteryProgressView.this.progress) {\\n                    Log.e(\\\"first\\\",lastProgress+\\\" to \\\"+ (incr * (BatteryProgressView.this.progress))+\\\":\\\"+lastProgress);\\n                    animator \\u003d ValueAnimator.ofFloat(incr*lastProgress, incr * (BatteryProgressView.this.progress));\\n                    animator.setDuration(800);\\n                    animator.addUpdateListener(animatorUpdateListener);\\n                    animator.setInterpolator(new DecelerateInterpolator());\\n                    animator.start();\\n                }else {\\n                    Log.e(\\\"second\\\",lastProgress+\\\" to \\\"+ (incr * (BatteryProgressView.this.progress))+\\\":\\\"+lastProgress);\\n                    animator \\u003d ValueAnimator.ofFloat((incr*lastProgress), incr * (BatteryProgressView.this.progress));\\n                    animator.setDuration(800);\\n                    animator.addUpdateListener(animatorUpdateListener);\\n                    animator.setInterpolator(new DecelerateInterpolator());\\n                    animator.start();\\n                }\\n            }\\n        });\\n    }\\n    public float getMaxProgress() {\\n        return maxProgress;\\n    }\\n    public void setMaxProgress(int maxProgress) {\\n        this.maxProgress \\u003d maxProgress;\\n    }\\n    @Override\\n    public void onWindowFocusChanged(boolean hasWindowFocus) {\\n        super.onWindowFocusChanged(hasWindowFocus);\\n    }\\n    ValueAnimator.AnimatorUpdateListener animatorUpdateListener \\u003d new ValueAnimator.AnimatorUpdateListener() {\\n        @Override\\n        public void onAnimationUpdate(ValueAnimator animation) {\\n            float update \\u003d (float) (animation.getAnimatedValue());\\n            float incr\\u003d360/maxProgress;\\n            float value\\u003d(update/incr);\\n            progressUpdate\\u003dupdate;\\n            progressText\\u003d((int)value)+\\\"\\\";\\n            invalidate();\\n        }\\n    };\\n    public void setTextColor(int textColor) {\\n        this.textColor \\u003d textColor;\\n    }\\n}\",\"headerSpec\":\"don\\u0027t put any blocks\",\"var\":\"BatteryProgress\",\"icon\":\"2131165403\",\"name\":\"Enable BatteryProgress\",\"listener\":\"BatteryProgress\",\"description\":\"BatteryProgress\",\"parameters\":\"\"},{\"code\":\"%s\",\"headerSpec\":\"### don\\u0027t put any thing here\",\"var\":\"TextColorAnimator\",\"icon\":\"2131165505\",\"name\":\"Enable\",\"listener\":\"TextColorAnimator\",\"description\":\"You must clicked this to Enable the component\",\"parameters\":\"\"}"}]